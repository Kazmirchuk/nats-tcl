# Copyright (c) 2020-2021 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - authentication with user+password and auth_token
# - authentication error handling
# - supplying credentials from URL or options
# - connecting to multiple servers with different authentication requirements

test_utils::startNats NATS_user --user bilbo --pass ring

set conn [nats::connection new]
#debugLogging $conn

test auth-1.1 "Connect to NATS using login/password in URL" -body {
    $conn configure -servers nats://bilbo:ring@localhost:4222
    set obs [test_utils::chanObserver new $conn w]
    $conn connect
    # check that the connection really works
    set test_utils::simpleMsg ""
    $conn subscribe subject1 -callback test_utils::simpleCallback
    $conn publish subject1 "Hello Bilbo"
    wait_for test_utils::simpleMsg
    
    assert {[string is true -strict [set ${conn}::serverInfo(auth_required)]]}
    
    set connectDict [getConnectOpts [$obs getChanData]]
    assert {[dict get $connectDict user] eq "bilbo"}
    assert {[dict get $connectDict pass] eq "ring"}
    
    set test_utils::simpleMsg
} -result "Hello Bilbo" -cleanup {
    $conn disconnect
    $conn reset -servers
    $obs destroy
}

test auth-1.2 "Connect to NATS using login/password in options" -body {
    $conn configure -servers nats://localhost:4222 -user bilbo -password ring
    $conn connect
    set test_utils::simpleMsg ""
    $conn subscribe subject1 -callback test_utils::simpleCallback
    $conn publish subject1 "hello again"
    wait_for test_utils::simpleMsg
    set test_utils::simpleMsg
} -result {hello again} -cleanup {
    $conn disconnect
    $conn reset -servers -user -password
}

test auth-1.3 "Try connecting to NATS with wrong login/password" -body {
    $conn configure -servers nats://localhost:4222 -user bilbo -password ring2
    catch {$conn connect} err errOpts
    assert {[dict get $errOpts -errorcode] eq {NATS ErrNoServers}}
    set last_error [set ${conn}::last_error]
    assert {[dict get $last_error code] eq {NATS ErrAuthorization}}
    dict get $last_error errorMessage
} -result {authorization violation*} -match glob -cleanup {
    $conn disconnect
    $conn reset -servers -user -password
}

test_utils::stopNats NATS_user

test_utils::startNats NATS_token --auth 12345

test auth-2.1 "Connect to NATS using an authentication token in URL" -body {
    $conn configure -servers nats://12345@localhost:4222
    set obs [test_utils::chanObserver new $conn w]
    $conn connect
    set test_utils::simpleMsg ""
    $conn subscribe subject1 -callback test_utils::simpleCallback
    $conn publish subject1 "hello token"
    wait_for test_utils::simpleMsg
    
    assert {[string is true -strict [set ${conn}::serverInfo(auth_required)]]}
    set connectDict [getConnectOpts [$obs getChanData]]
    assert {[dict get $connectDict auth_token] eq "12345"}
        
    set test_utils::simpleMsg
} -result {hello token} -cleanup {
    $conn disconnect
    $conn reset -servers
    $obs destroy
}

test auth-2.2 "Connect to NATS using an authentication token in options" -body {
    $conn configure -servers nats://localhost:4222 -token 12345
    $conn connect
    set test_utils::simpleMsg ""
    $conn subscribe subject1 -callback test_utils::simpleCallback
    $conn publish subject1 "hello token2"
    wait_for test_utils::simpleMsg
    set test_utils::simpleMsg
} -result {hello token2} -cleanup {
    $conn disconnect
    $conn reset -servers -token
}

test auth-2.3 "Try connecting with no credentials" -body {
    $conn configure -servers nats://localhost:4222
    catch {$conn connect} err errOpts
    assert {[dict get $errOpts -errorcode] eq {NATS ErrNoServers}}
    set last_error [set ${conn}::last_error]
    assert {[dict get $last_error code] eq {NATS ErrAuthorization}}
    dict get $last_error errorMessage
} -result {No credentials known*} -match glob -cleanup {
    $conn disconnect
    $conn reset -servers
}

test_utils::startNats NATS -p 4223

test auth-2.4 "Try connecting to a cluster with no credentials" -body {
    # the first server will reject the connection, the second server will accept
    $conn configure -servers [list nats://localhost:4222 nats://localhost:4223] -randomize false
    duration {
        $conn connect
    } elapsed
    assert {$elapsed < 50}
    lassign [$conn current_server] host port
    assert {$host eq "localhost"}
    assert {$port == 4223}
    assert {[set ${conn}::status] == $nats::status_connected} 1
} -cleanup {
    $conn disconnect
    $conn reset -servers -randomize
}

test_utils::stopNats NATS_token
test_utils::stopNats NATS
tcltest::cleanupTests
