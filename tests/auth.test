# Copyright (c) 2020-2023 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - authentication with user+password and auth_token
# - authentication error handling
# - supplying credentials from URL or options
# - connecting to multiple servers with different authentication requirements

source test_utils.tcl

startNats NATS_user --user bilbo --pass ring
# unrelated to authentication, but need to test this way of creating objects in TclOO too
nats::connection create conn "auth_test" -log_chan [tcltest::outputChannel]
conn configure -randomize false

test auth-1.1 "Connect to NATS using login/password in URL" -body {
    conn configure -servers nats://bilbo:ring@localhost:4222
    sniffer conn {
        conn connect
        # check that the connection really works
        conn subscribe subject1 -callback subCallback
        conn publish subject1 "Hello Bilbo"
        wait_for ::inMsg
    } rdata wdata
    assert {[dict get [conn server_info] auth_required]}
    set connectDict [getConnectOpts $wdata]
    assert {[dict get $connectDict user] eq "bilbo"}
    assert {[dict get $connectDict pass] eq "ring"}    
    set inMsg
} -result "Hello Bilbo" -cleanup {
    conn disconnect
    conn reset -servers
}

test auth-1.2 "Connect to NATS using login/password in options" -body {
    conn configure -servers nats://localhost:4222 -user bilbo -password ring
    conn connect
    conn subscribe subject1 -callback subCallback
    conn publish subject1 "hello again"
    wait_for ::inMsg
    set inMsg
} -result "hello again" -cleanup {
    conn disconnect
    conn reset -servers -user -password
}

test auth-1.3 "Try connecting to NATS with wrong login/password - multiple servers in the pool" -body {
    conn configure -servers [list nats://localhost:4223 nats://localhost:4222] -user bilbo -password ring2
    try {
        conn connect
    } trap {NATS ErrNoServers} err {}
    set errCode [lastError conn errMessage]
    assert {$errCode eq "ErrAuthorization"}
    set errMessage
} -result {authorization violation*} -match glob -cleanup {
    conn disconnect
    conn reset -servers -user -password
}

test auth-1.4 "Try connecting to NATS with wrong login/password - one server in the pool" -body {
    conn configure -servers nats://localhost:4222 -user bilbo -password ring2
    conn connect
} -result {authorization violation*} -match glob -errorCode {NATS ErrAuthorization} -cleanup {
    conn disconnect
    conn reset -servers -user -password
}

stopNats NATS_user

startNats NATS_token --auth 12345

test auth-2.1 "Connect to NATS using an authentication token in URL" -body {
    conn configure -servers nats://12345@localhost:4222
    sniffer conn {
        conn connect
        conn subscribe subject1 -callback subCallback
        conn publish subject1 "hello token"
        wait_for ::inMsg
    } rdata wdata
    assert {[dict get [conn server_info] auth_required]}
    set connectDict [getConnectOpts $wdata]
    assert {[dict get $connectDict auth_token] eq "12345"}
    set inMsg
} -result "hello token" -cleanup {
    conn disconnect
    conn reset -servers
}

test auth-2.2 "Connect to NATS using an authentication token in options" -body {
    conn configure -servers nats://localhost:4222 -token 12345
    conn connect
    conn subscribe subject1 -callback subCallback
    conn publish subject1 "hello token2"
    wait_for ::inMsg
    set inMsg
} -result "hello token2" -cleanup {
    conn disconnect
    conn reset -servers -token
}

test auth-2.3 "Try connecting with no credentials" -body {
    conn configure -servers nats://localhost:4222
    conn connect
} -result {No credentials known*} -match glob -errorCode {NATS ErrAuthorization} -cleanup {
    conn disconnect
    conn reset -servers
}

startNats NATS_open -p 4223

test auth-2.4 "Try connecting to a pool with no credentials - OK" -body {
    # the first server will reject the connection, the second server will accept
    conn configure -servers [list nats://localhost:4222 nats://localhost:4223]
    duration {
        conn connect
    } elapsed
    assert {$elapsed < 100}
    lassign [conn current_server] host port
    assert {$host eq "localhost"}
    assert {$port == 4223}
    assert {[conn cget -status] eq $nats::status_connected} 1
} -cleanup {
    conn disconnect
    conn reset -servers
}

conn destroy
stopNats NATS_open
stopNats NATS_token
cleanupTests
