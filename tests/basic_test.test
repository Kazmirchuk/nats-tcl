# Copyright (c) 2020 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

namespace import ::tcltest::*
tcltest::configure {*}$argv

test_utils::startNats NATS

proc onConnectionChanged {status} {
    #possible statuses: connecting connected closed
    puts "New connection state: $status"
}

set conn [nats::connection new "BasicNats"]
# available logger severity levels: debug info notice warn error critical alert emergency
# default is "warn"
[$conn cget -logger]::setlevel info
$conn configure -servers nats://localhost:4222 -connection_cb onConnectionChanged

set responder [test_utils::responder new service]

test basic-1 "Connect NATS" -body {
    # we need to connect asynchronously to be able to catch the CONNECT message
    $conn connect -async
    set obs [test_utils::chanObserver new [set ${::conn}::sock] w]
    test_utils::sleep 500
    set chanData [$obs getChanData]
    assert {$chanData eq {CONNECT {"verbose":false,"pedantic":false,"tls_required":false,"name":"BasicNats","lang":"Tcl","version":"0.9","protocol":1,"echo":true}}} $chanData
    $obs destroy
    expr {[$conn cget -status] eq "connected"}
} -result {1}

test basic-2 "Subscribe to a message" -body {
    set obs [test_utils::chanObserver new [set ${::conn}::sock] w]
    set sub_id [$conn subscribe subject1 -callback test_utils::simpleCallback]
    test_utils::sleep 1000
    set chanData [$obs getChanData]
    assert {$chanData eq {SUB subject1  1}} $chanData
    $obs destroy
    set sub_id
}  -result {1} 

test basic-3 "Publish a message" -body {
    set obs [test_utils::chanObserver new [set ${::conn}::sock] w]
    $conn publish subject1 hello
    vwait test_utils::simpleMsg
    set chanData [$obs getChanData]
    assert {$chanData eq {PUB subject1  5}} $chanData
    $obs destroy
    set test_utils::simpleMsg
} -result {hello} 

test basic-4 "Unsubscribe and publish again" -body {
    set obs [test_utils::chanObserver new [set ${::conn}::sock] w]
    $conn unsubscribe $sub_id
    $conn publish subject1 "one more hello"
    test_utils::sleep 500
    set chanData [$obs getChanData]
    assert {$chanData eq "UNSUB $sub_id"} $chanData
    $obs destroy
    set test_utils::simpleMsg
} -result {hello} 

test basic-5.1 "Synchronous request" -body {
    set obs [test_utils::chanObserver new [set ${::conn}::sock] b]
    set result [$conn request service "0 hello"]
    lassign [$obs getChanData 0] rdata wdata
    $obs destroy
    set result
} -result {hello} 

test basic-5.2 "Synchronous request - written to socket" -body {
    lassign [split $wdata \n] sub pub payload
    # the first request starts with subscribing to INBOX.<random>.*
    assert {[regexp {SUB _INBOX.*.\*  ([[:digit:]]+)} $sub -> subID]}
    assert {[regexp {PUB service _INBOX.*.1 (.*)} $pub -> msg_length]}
    assert {$payload eq "0 hello"}
    assert {$msg_length == [string length $payload]}
} 

test basic-5.3 "Synchronous request - read from socket" -body {
    lassign [split $rdata \n] msg payload
    assert {[regexp {MSG _INBOX.*.1 ([[:digit:]]+) (.*)} $msg -> subID2 msg_length]}
    assert {$payload eq "hello"}
    assert {$msg_length == [string length $payload]}
    assert {$subID == $subID2}
}

test basic-5.4 "Synchronous request with timeout - success" -body {
    $conn request service "500 sync_req" -timeout 600
} -result {sync_req} 

test basic-5.5 "Synchronous request with timeout - failure" -body {
    $conn request service "600 sync_req" -timeout 500
} -returnCodes {error} -result {Request timeout}

# wait until the delayed message arrives
test_utils::sleep 500

test basic-6.1 "Asynchronous request" -body {
    $conn request service "0 async_req" -callback test_utils::asyncReqCallback
    vwait test_utils::simpleMsg
    set test_utils::simpleMsg
} -result {async_req}

test basic-6.2 "Asynchronous request with timeout - success" -body {
    #TODO: reduce timeout... force flush in responder not working?
    $conn request service "0 async_req2" -timeout 600 -callback [list test_utils::asyncReqCallback]
    vwait test_utils::simpleMsg
    set test_utils::simpleMsg
} -result {async_req2}

test basic-6.3 "Asynchronous request with timeout - failure" -body {
    $conn request service "500 async_req3" -timeout 400 -callback [list test_utils::asyncReqCallback]
    vwait test_utils::simpleMsg
    set test_utils::simpleMsg
} -result {timeout}

test basic-6.4 "2 asynchronous requests" -body {
    #send two async requests, where the second request should complete faster than the first
    $conn request service "500 async_req4" -timeout 1500 -callback [list test_utils::asyncReqCallback]
    $conn request service "100 async_req5" -timeout 1000 -callback [list test_utils::asyncReqCallback]
    vwait test_utils::simpleMsg
    assert {$test_utils::simpleMsg eq "async_req5"} $test_utils::simpleMsg
    vwait test_utils::simpleMsg
    assert {$test_utils::simpleMsg eq "async_req4"} $test_utils::simpleMsg
}


$responder destroy
$conn destroy
test_utils::stopNats NATS
cleanupTests
