# Copyright (c) 2020 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

namespace import ::tcltest::test
namespace import test_utils::*

tcltest::configure {*}$argv

startNats NATS

set conn [nats::connection new "BasicNats"]
# available logger severity levels: debug info notice warn error critical alert emergency
# default is "warn"
[$conn logger]::setlevel debug

trace add variable ${conn}::status write [lambda {var idx op } {
    upvar $var s
    puts "New status: $s"
}]
trace add variable ${conn}::last_error write [lambda {var idx op } {
    upvar $var e
    puts "Async error: $e"
}]

$conn configure -servers nats://localhost:4222

startResponder

test basic-1 "Connect NATS" -body {
    # we need to connect asynchronously to be able to catch the CONNECT message
    $conn connect -async
    set obs [test_utils::chanObserver new $conn w]
    while {[set ${conn}::status] ne $nats::status_connected} {
        vwait ${conn}::status
    }
    set chanData [$obs getChanData]
    assert {$chanData eq {CONNECT {"verbose":false,"pedantic":false,"tls_required":false,"name":"BasicNats","lang":"Tcl","version":"0.9","protocol":1,"echo":true}}} $chanData
    $obs destroy
    set ${conn}::last_error
} -result {}

test basic-2 "Subscribe to a message" -body {
    set obs [test_utils::chanObserver new $conn w]
    set sub_id [$conn subscribe subject1 -callback test_utils::simpleCallback]
    wait_flush $conn
    set chanData [$obs getChanData]
    # double space is not accidental
    assert {$chanData eq "SUB subject1  $sub_id"} $chanData
    $obs destroy
    set sub_id
}  -result {1} 

test basic-3 "Publish a message" -body {
    set obs [chanObserver new $conn b]
    duration {
        $conn publish subject1 hello
        vwait test_utils::simpleMsg
    } elapsed
    lassign [$obs getChanData] readData writtenData
    assert {$writtenData eq {PUB subject1  5}} $writtenData
    assert {$readData eq "MSG subject1 $sub_id 5"} $readData
    assert {$elapsed < 1000} $elapsed ;# time to flush and receive MSG from the server
    $obs destroy
    set test_utils::simpleMsg
} -result {hello} 

test basic-4 "Unsubscribe and publish again" -body {
    set obs [chanObserver new $conn b]
    $conn unsubscribe $sub_id
    $conn publish subject1 "one more hello"
    duration {
        wait_flush $conn
    } elapsed
    lassign [$obs getChanData 0] readData writtenData
    assert {[lindex $writtenData 0] eq "UNSUB $sub_id"} $writtenData
    assert {[lindex $writtenData 1] eq "PUB subject1  [string length {one more hello}]"} $writtenData
    assert {$elapsed < 600} $elapsed ;# time to flush
    # check that the server did not send MSG back
    assert {[llength $readData] == 0} $readData
    $obs destroy
    set test_utils::simpleMsg
} -result {hello} 

test basic-5.1 "Synchronous request" -body {
    set obs [chanObserver new $conn b]
    duration {
        set result [$conn request service "0 hello"]
    } elapsed
    assert {$elapsed < 400} $elapsed ;# flush is immediate; actual roundtrip time on localhost ~40ms
    lassign [$obs getChanData 0] rdata wdata
    $obs destroy
    set result
} -result {hello} 

test basic-5.2 "Synchronous request - written to socket" -body {
    lassign $wdata sub pub payload
    # the first request starts with subscribing to INBOX.<random>.*
    assert {[regexp {SUB _INBOX.*.\*  ([[:digit:]]+)} $sub -> subID]}
    assert {[regexp {PUB service _INBOX.*.1 (.*)} $pub -> msg_length]}
    assert {$msg_length == [string length $payload]}
    set payload
} -result {0 hello} 

test basic-5.3 "Synchronous request - read from socket" -body {
    lassign $rdata msg payload
    assert {[regexp {MSG _INBOX.*.1 ([[:digit:]]+) (.*)} $msg -> subID2 msg_length]}
    assert {$msg_length == [string length $payload]}
    assert {$subID == $subID2}
    set payload
} -result {hello} 

test basic-5.4 "Synchronous request with timeout - success" -body {
    duration {
        set result [$conn request service "500 sync_req" -timeout 600]
    } elapsed
    assert {$elapsed >= 500 && $elapsed < 600} $elapsed
    set result
} -result {sync_req} 

test basic-5.5 "Synchronous request with timeout - failure" -body {
    duration {
        $conn request service "600 sync_req" -timeout 500
    } elapsed
    assert {$elapsed >= 500 && $elapsed < 590} $elapsed
} -returnCodes {error} -result {Request to service timed out}

# wait until the delayed message arrives
sleep 500

test basic-6.1 "Asynchronous request" -body {
    duration {
        $conn request service "100 async_req" -callback test_utils::asyncReqCallback
    } elapsed
    assert {$elapsed < 50} $elapsed ;# async request returns immediately
    
    duration {
        vwait test_utils::simpleMsg
    } elapsed
    assert {$elapsed >= 100 && $elapsed < 500} $elapsed
    
    set test_utils::simpleMsg
} -result {async_req}

test basic-6.2 "Asynchronous request with timeout - success" -body {
    #TODO: reduce timeout... force flush in responder not working?
    $conn request service "0 async_req2" -timeout 600 -callback [list test_utils::asyncReqCallback]
    vwait test_utils::simpleMsg
    set test_utils::simpleMsg
} -result {async_req2}

test basic-6.3 "Asynchronous request with timeout - failure" -body {
    $conn request service "500 async_req3" -timeout 400 -callback [list test_utils::asyncReqCallback]
    vwait test_utils::simpleMsg
    set test_utils::simpleMsg
} -result {timeout}

test basic-6.4 "2 asynchronous requests" -body {
    #send two async requests, where the second request should complete faster than the first
    $conn request service "500 async_req4" -timeout 1500 -callback [list test_utils::asyncReqCallback]
    $conn request service "100 async_req5" -timeout 1000 -callback [list test_utils::asyncReqCallback]
    vwait test_utils::simpleMsg
    assert {$test_utils::simpleMsg eq "async_req5"} $test_utils::simpleMsg
    vwait test_utils::simpleMsg
    assert {$test_utils::simpleMsg eq "async_req4"} $test_utils::simpleMsg
}

test basic-7 "Sending and receiving a binary message" -body {
    set binString "\nhello\0world\r\n" ;# include a null byte and CR+LF that is a delimiter in the NATS protocol
    $conn subscribe bin_subj -callback test_utils::simpleCallback
    $conn publish bin_subj $binString
    vwait test_utils::simpleMsg
    assert { $test_utils::simpleMsg eq $binString } [binary encode hex $test_utils::simpleMsg]
}

# check all config options

stopResponder $conn
$conn destroy
stopNats NATS
tcltest::cleanupTests
