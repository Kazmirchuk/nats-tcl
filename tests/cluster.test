# Copyright (c) 2020-2023 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - creating a cluster with 2 servers
# - receiving INFO with connect_urls
# - reconnecting and restoring subscriptions
# - how requests interact with disconnections

source test_utils.tcl

# "seed" server
# --client_advertise is not mandatory, but is useful to track what addresses are added to the server pool from the INFO message
# and to filter out duplicate servers
proc startClusterNats1 {} {
    startNats NATS1 --cluster nats://localhost:4248 --cluster_name "TCL_TEST" --client_advertise "localhost:4222"
}
proc startClusterNats2 {} {
    startNats NATS2 -p 5222 --cluster nats://localhost:5248 --routes nats://localhost:4248 --cluster_name "TCL_TEST" --client_advertise "localhost:5222"
}
# I don't know if there is a reliable way to trigger a NATS server to send out INFO with connect_urls
# if I start with creating a cluster and then connect with the client, I often don't get it for a long time
# but if I start with one server, connect with the client and then add a second server, I seem to get it reliably and quickly
test cluster-1.1 "Dynamic expansion of the server pool with INFO message" -setup {
    startClusterNats1
    set conn [nats::connection new "Cluster" -log_chan [tcltest::outputChannel]]
    set connNs [info object namespace $conn]
} -body {
    # start with only the seed server
    $conn configure -servers nats://localhost:4222
    $conn connect
    assert {[llength [$conn all_servers]] == 1}
    # add another server to the cluster
    startClusterNats2
    while {[llength [$conn all_servers]] == 1} {
        test_utils::log::info "Wait for the INFO message with connect_urls..."
        vwait ${conn}::serverInfo ;# can't use wait_for with arrays
    }
    # make sure that one of connect_urls was filtered out as a duplicate
    assert {[llength [$conn all_servers]] == 2 } 1
    set discovered_server [lindex [$conn all_servers] 0]
    assert {[dict get $discovered_server host] eq "localhost"} 1
    assert {[dict get $discovered_server port] == 5222} 1
    assert {[dict get $discovered_server discovered]}
    # check that we are still connected to the seed server
    $conn current_server
} -result {localhost 4222}

test cluster-1.2 "Restore subscriptions after reconnecting to another server" -body {
    $conn subscribe eupnea -callback subCallback
    $conn ping
    set all_statuses [list]
    proc status_trace {var idx op } {
        upvar 1 $var s
        lappend ::all_statuses $s
    }
    trace add variable ${connNs}::status write status_trace
    
    set allErrors [list]
    trace add variable ${connNs}::last_error write errorTrace
    
    stopNats NATS1
    $conn publish foo bar ;# find out about the failure ASAP
    sleep 500
    
    assert {$allErrors eq "ErrBrokenSocket"}
    assert {$all_statuses eq {reconnecting connected}}
    
    lassign [$conn current_server] host port
    assert {$host eq "localhost"}
    assert {$port == 5222}

    $conn publish eupnea "back online"
    wait_for ::inMsg
} -result "back online" -cleanup {
    trace remove variable ${connNs}::status write status_trace
    trace remove variable ${connNs}::last_error write errorTrace
    $conn disconnect
    stopNats NATS2
}

test cluster-2 "Outgoing messages are buffered while reconnecting" -body {
    startNats NATS1 ;# no need to create a real cluster for this test case
    $conn configure -servers nats://localhost:4222
    $conn connect
    $conn subscribe subj -callback subCallback -max_msgs 1
    $conn ping
    stopNats NATS1
    catch {$conn ping -timeout 500} err errOpts ;# find out about the failure ASAP
    set errCode [lindex [dict get $errOpts -errorcode] 1]
    assert {$errCode eq "ErrTimeout" || $errCode eq "ErrConnectionClosed"} ;# most likely ErrTimeout, but both are valid
    assert {[$conn cget status] eq $nats::status_reconnecting} 1
    
    $conn publish subj "Buffered message"
    sleep 100 ;# reconnect to NATS2, restore the subscription and publish the message
    startNats NATS1
    duration {
        wait_flush $conn
    } elapsed
    assert {$elapsed <= [$conn cget -reconnect_time_wait]} 1 ;# 2s by default
    assert {[$conn cget status] eq $nats::status_connected} 1
    sleep 500    
    assert {$inMsg eq "Buffered message"}
    $conn publish subj "Buffered message 2"
    sleep 500
    set inMsg ;# check that UNSUB worked too
} -result "Buffered message" -cleanup {
    $conn disconnect
}

test cluster-3.1 "Requests time out if connection is lost - async" -setup {
    set resp [responder new]
    $conn configure -max_reconnect_attempts 1 -connect_timeout 500 -reconnect_time_wait 0
    $conn connect
} -body {
    # note that timeouts do not happen, if the user calls 'disconnect', see test basic-18
    set now [clock milliseconds]
    $conn request service "500 lost message" -timeout 2000 -callback [lambda {timedOut msg} {
        set ::cbResult [list $timedOut $msg [clock milliseconds]]
    }]
    $conn ping
    stopNats NATS1
    # the client tries to connect to NATS once more and times out:
    # - on Windows: after connect_timeout=500ms
    # - on Linux: connection is rejected immediately
    # after that the server is removed from the pool
    duration {
        catch {$conn ping -timeout 800} err errOpts
    } elapsed
    assert {$elapsed < 900}
    assert {[$conn cget status] eq $nats::status_closed} 1
    lassign $cbResult timedOut msg timestamp
    assert {$timedOut}
    assert {$timestamp - $now < 1100} ;# stopNats=500ms + connect_timeout=500ms
    set msg
} -result "" -cleanup {
    $resp destroy
    $conn disconnect
}

test cluster-3.2 "Requests time out if connection is lost - sync" -setup {
    startNats NATS1
    set resp [responder new]
    # the server pool is empty after the prev. test case, so populate it again
    $conn configure -servers nats://localhost:4222
    $conn connect
} -body {
    coroutine sync_request {*}[lambda {} {
        catch {[$::conn request service "500 lost message" -timeout 2000]} err errOpts
        set ::request_done $errOpts
    }]
    stopNats NATS1
    duration {
        wait_for ::request_done 5000
    } elapsed
    assert {$elapsed < 600} ;# connect_timeout=500ms
    assert {[$conn cget status] eq $nats::status_closed} 1
    dict get $request_done -errorcode
} -result {NATS ErrTimeout} -cleanup {
    $resp destroy
    $conn disconnect
}

test cluster-4 "Requests can transfer from one server to another within a cluster" -setup {
    startClusterNats1
    startClusterNats2
    $conn configure -servers [list nats://localhost:4222 nats://localhost:5222] -randomize false
    $conn connect
    set resp [responder new -subject cluster -servers nats://localhost:5222]
} -body {
    assert {[$conn current_server] eq {localhost 4222}} 1
    while {1} {
        try {
            # give time for both servers to exchange the subscription interest graph, otherwise we may get no-responders to our request
            sleep 500
            set reply [$conn request cluster "0 ready?"]
            assert {$reply eq "ready?"}
            break
        } trap {NATS ErrNoResponders} err {
            test_utils::log::info "Waiting for the responder..."
        }
    }
    $conn request cluster "1500 hello" -timeout 3000 -callback asyncReqCallback
    $conn ping
    stopNats NATS1 ;# takes 500ms
    # $conn ping - involves vwait, so the whole failover process can succeed by the time we return from 'ping'
    $conn publish foo bar ;# find out about the failure
    while {[$conn cget status] ne $nats::status_reconnecting} {
        wait_for ${connNs}::status 2000
    }
    test_utils::log::info "The client is reconnecting..."
    duration {
        wait_for ::inMsg 2000
    } elapsed
    assert {$elapsed < 1200} ;# should be ~1000ms
    assert {[$conn cget status] eq $nats::status_connected} 1
    assert {[$conn current_server] eq {localhost 5222}} 1
    set inMsg
} -result "hello" -cleanup {
    $resp destroy
    $conn destroy
    stopNats NATS2
}
cleanupTests
