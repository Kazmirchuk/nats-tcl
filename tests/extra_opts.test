# Copyright (c) 2021-2023 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - verbose, pedantic, no-echo options
# - PING/PONG protocol and timeouts
# - utf8_convert, check_connection

source test_utils.tcl
startNats NATS

set conn [nats::connection new "ExtraConfigOptions"]
#debugLogging $conn

$conn configure -servers nats://localhost:4222

test extra_opts-1 "Check verbose and pedantic modes" -body {
    # in the verbose mode NATS server acks each message with +OK - we simply check that the client doesn't break because of it
    # in the pedantic mode NATS server reports -ERR for invalid subjects, but doesn't close the connection
    # in order to get this -ERR I need to disable subject checking on client side
    $conn configure -verbose true -pedantic true -check_subjects false
    $conn connect -async ;# NATS sends back INFO, then replies +OK to our CONNECT
    sniffer $conn {
        while {[set ${conn}::status] ne $nats::status_connected} {
            wait_for ${conn}::status
        }
        $conn publish dummy_subj "Hello NATS" ;# NATS sends back +OK
        $conn publish invalid_subj.* "Hello NATS 2" ;# NATS sends back -ERR and +OK (?!)
        sleep 300
    } readData writtenData -all_lines 1
    
    assert {[set ${conn}::status] == $nats::status_connected} 1 ;# the connection should be still alive

    set connectDict [getConnectOpts [lindex $writtenData 0]] 
    assert {[dict get $connectDict verbose] eq "true"}
    assert {[dict get $connectDict pedantic] eq "true"}
    
    assert {[lindex $readData 1] eq "+OK"}
    assert {[lindex $readData 2] eq "+OK"}
    
    set err [set ${conn}::last_error]
    assert {[dict get $err code] eq [list NATS ErrBadSubject]}
} -cleanup {
    $conn disconnect
    $conn reset -verbose -pedantic -check_subjects
}

test extra_opts-2 "Check the echo=false option" -body {
    set inMsg ""
    $conn configure -echo false
    $conn connect -async
    sniffer $conn {
        while {[set ${conn}::status] ne $nats::status_connected} {
            wait_for ${conn}::status
        }
    } rdata wdata
    set connectDict [getConnectOpts $wdata]
    assert {[dict get $connectDict echo] eq "false"}
        
    $conn subscribe no_echo -callback subCallback
    $conn publish no_echo "cold is the void" ;# we will not get this message back
    assert {[catch {wait_for ::inMsg}] == 1}
    # but a request to another subscriber still works fine
    startResponder $conn no_echo
    set result [$conn request no_echo "0 hello"]
    assert {$result eq "hello"}
} -cleanup {
    stopResponder $conn no_echo
    $conn disconnect
    $conn reset -echo
}

test extra_opts-3 "PING/PONG protocol initiated by client" -body {
    $conn configure -ping_interval 1000 ;# default is 2 minutes
    $conn connect
    sniffer $conn {
        duration {
            wait_for ${conn}::pong 2000
        } elapsed
    } readData writtenData -all_lines 1 -filter_ping 0
    assert {$elapsed >= 1000 && $elapsed < 1300}
    # check that the exchange occurred exactly once
    assert {[lsearch -all $writtenData "PING"] == 0}
    assert {[lsearch -all $readData "PONG"] == 0}
} -cleanup {
    $conn disconnect
    $conn reset -ping_interval
}

stopNats NATS

test extra_opts-4.1 "PING/PONG protocol initiated by server" -body {
    # I can't pass ping_interval as a command line argument to the NATS server, so have to create a config file
    set conf [tcltest::makeFile {
        ping_interval: "2s"
        ping_max: 1
    } quick_ping.conf ]
    startNats quick_ping -c $conf
    $conn connect
    sniffer $conn {
        sleep 2400
    } readData writtenData -all_lines 1 -filter_ping 0
    # check that the exchange occurred exactly once
    assert {[lsearch -all $writtenData "PONG"] == 0}
    assert {[lsearch -all $readData "PING"] == 0}
} -cleanup {
    tcltest::removeFile quick_ping.conf
}

test extra_opts-4.2 "PING/PONG - no response from the client" -body {
    set bufferTrace [lambda {var idx op } {
        upvar 1 $var buffer
        set pos [lsearch $buffer "PONG"]
        if {$pos == -1} {
            return
        }
        set buffer [lsearch -inline -all -not -exact $buffer "PONG"] ;# do not send PONG to the server
        puts "Deleted PONG"
    }]
    # access to a private variable only for test purposes!
    trace add variable ${conn}::outBuffer write $bufferTrace
    # wait for the next PING/PONG exchange initiated by the server
    # we do not respond to PING, so the server will report an error with -ERR and close the socket
    # which will make the client go into the reconnecting mode
    duration {
        wait_for ${conn}::status 6000
    } elapsed
    assert {[dict get [set ${conn}::last_error] code] eq [list NATS ErrStaleConnection]}
    assert {[set ${conn}::status] == $nats::status_reconnecting} 1
    # after sending PING, the server will wait for 2s more before declaring 'Stale Connection'
    assert {$elapsed < 5000}
} -cleanup {
    $conn disconnect
    trace remove variable ${conn}::outBuffer write $bufferTrace
}

stopNats quick_ping

test extra_opts-5 "PING/PONG - no response from the server" -setup {
    # make a fake NATS server that does not respond to PING
    # but ensure the first round goes ok for "connect" to succeed
    startFakeServer
    set handler {
        proc handler {channel line} {
            if {$line eq "PING"} {
                incr ::ping_count
                if {$::ping_count == 1} {
                    puts $channel PONG
                } else {
                    puts $channel FAKE_PONG
                }
            }
        }
    }
    sendFakeServer $handler
} -body {
    $conn configure -ping_interval 1000
    # default max_outstanding_pings=2
    $conn connect
    duration {
        # the client will send 2 PINGs without reply; when Pinger runs for the 3rd time, it will raise the error
        # and the client will go into reconnecting
        wait_for ${conn}::status 4000
    } elapsed
    assert {[dict get [set ${conn}::last_error] code] eq [list NATS ErrStaleConnection]}
    assert {[set ${conn}::status] == $nats::status_reconnecting} 1
    assert {[approx $elapsed 3000]}
} -cleanup {
    $conn disconnect
    $conn reset -ping_interval
    stopFakeServer
}

startNats NATS
# this is "Eivør Pálsdóttir" encoded in UTF-8
set utf8_msg [encoding convertfrom utf-8 "\x45\x69\x76\xC3\xB8\x72\x20\x50\xC3\xA1\x6C\x73\x64\xC3\xB3\x74\x74\x69\x72"]
test extra_opts-6 "Check the utf8_convert option" -body {
    $conn configure -utf8_convert true
    $conn connect
    startResponder $conn
    set response [$conn request service "0 $utf8_msg"]  ;# check that the message comes back uncorrupted
    puts "Got UTF-8 response: $response"  ;# this should be readable in the terminal
    set response
} -result $utf8_msg -cleanup {
    stopResponder $conn
    $conn disconnect
    $conn reset -utf8_convert
}

test extra_opts-7.1 "option check_connection=true (default)" -body {
    $conn connect -async
    $conn subscribe subject1 -callback subCallback
} -result "No connection to NATS server" -errorCode {NATS ErrConnectionClosed} -cleanup {
    $conn disconnect
    assert {[set ${conn}::status] == $nats::status_closed} 1
}

test extra_opts-7.2 "option check_connection=false" -body {
    $conn configure -check_connection false
    # due to -check_connection false, PUB/SUB/UNSUB are buffered and flushed after a connection is established
    $conn connect -async
    $conn subscribe subject1 -callback subCallback
    $conn publish subject1 "hello"
    wait_for ::inMsg 1000
} -result "hello" -cleanup {
    $conn disconnect
    $conn reset -check_connection
}

$conn destroy
stopNats NATS
tcltest::cleanupTests
