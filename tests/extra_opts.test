# Copyright (c) 2021-2023 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - verbose, pedantic, no-echo options
# - PING/PONG protocol and timeouts
# - utf8_convert
# - connect -async

source test_utils.tcl
startNats NATS

set conn [nats::connection new "ExtraConfigOptions" -log_chan [tcltest::outputChannel]]
set connNs [info object namespace $conn]
$conn configure -servers nats://localhost:4222

test extra_opts-1 "Check verbose and pedantic modes" -body {
    # in the verbose mode NATS server acks each message with +OK - we simply check that the client doesn't break because of it
    # in the pedantic mode NATS server reports -ERR for invalid subjects, but doesn't close the connection
    # in order to get this -ERR I need to disable subject checking on client side
    $conn configure -verbose true -pedantic true -check_subjects false
    $conn connect -async ;# NATS sends back INFO, then replies +OK to our CONNECT
    sniffer $conn {
        while {[$conn cget status] ne $nats::status_connected} {
            wait_for ${connNs}::status
        }
        $conn publish dummy_subj "Hello NATS" ;# NATS sends back +OK
        $conn publish invalid_subj.* "Hello NATS 2" ;# NATS sends back -ERR and +OK (?!)
        sleep 300
    } readData writtenData -all_lines 1
    
    assert {[$conn cget status] eq $nats::status_connected} 1 ;# the connection should be still alive

    set connectDict [getConnectOpts [lindex $writtenData 0]] 
    assert {[dict get $connectDict verbose] eq "true"}
    assert {[dict get $connectDict pedantic] eq "true"}
    
    assert {[lindex $readData 1] eq "+OK"}
    assert {[lindex $readData 2] eq "+OK"}
    
    lastError $conn
} -result ErrBadSubject -cleanup {
    $conn disconnect
    $conn reset -verbose -pedantic -check_subjects
}

test extra_opts-2 "Check the echo=false option" -body {
    set inMsg ""
    $conn configure -echo false
    $conn connect -async
    sniffer $conn {
        while {[$conn cget status] ne $nats::status_connected} {
            wait_for ${connNs}::status
        }
    } rdata wdata
    set connectDict [getConnectOpts $wdata]
    assert {[dict get $connectDict echo] eq "false"}
        
    $conn subscribe no_echo -callback subCallback
    $conn publish no_echo "cold is the void" ;# we will not get this message back
    assert {[catch {wait_for ::inMsg}] == 1}
    # but a request to another subscriber still works fine
    set resp [responder new -subject no_echo]
    $conn request no_echo "0 hello"
} -result "hello" -cleanup {
    $resp destroy
    $conn disconnect
    $conn reset -echo
}

test extra_opts-3 "PING/PONG protocol initiated by client" -body {
    $conn configure -ping_interval 1000 ;# default is 2 minutes
    $conn connect
    sniffer $conn {
        duration {
            wait_for ${connNs}::pong 2000
        } elapsed
    } readData writtenData -all_lines 1 -filter_ping 0
    assert {$elapsed >= 1000 && $elapsed < 1300}
    # check that the exchange occurred exactly once
    assert {[lsearch -all $writtenData "PING"] == 0}
    assert {[lsearch -all $readData "PONG"] == 0}
} -cleanup {
    $conn disconnect
    $conn reset -ping_interval
}

stopNats NATS

test extra_opts-4.1 "PING/PONG protocol initiated by server" -body {
    # I can't pass ping_interval as a command line argument to the NATS server, so have to create a config file
    # older NATS (v1.4) doesn't accept ping_interval: 2s, so just use int
    set conf [tcltest::makeFile {
        ping_interval: 2
        ping_max: 1
    } quick_ping.conf ] ;# will be deleted by tcltest::cleanupTests
    startNats quick_ping -c $conf
    $conn connect
    sniffer $conn {
        sleep 2400
    } readData writtenData -all_lines 1 -filter_ping 0
    # check that the exchange occurred exactly once
    assert {[lsearch -all $writtenData "PONG"] == 0}
    assert {[lsearch -all $readData "PING"] == 0}
}

test extra_opts-4.2 "PING/PONG - no response from the client" -body {
    # wait for the next PING/PONG exchange initiated by the server
    # the interceptor will delete all PONGs sent by the client, so the server will report an error with -ERR and close the socket
    # which will make the client go into the reconnecting mode
    intercept $conn "" [dict create "PONG\r\n" {}]
    duration {
        wait_for ${connNs}::status 6000
    } elapsed
    assert {[lastError $conn] eq "ErrStaleConnection"}
    assert {[$conn cget status] eq $nats::status_reconnecting} 1
    # after sending PING, the server will wait for 2s more before declaring 'Stale Connection'
    assert {$elapsed < 5000}
} -cleanup {
    $conn disconnect ;# the interceptor object is automatically destroyed, when the socket is closed
}

test extra_opts-4.3 "PING/PONG - no response from the server" -body {
    $conn configure -ping_interval 1000
    # default max_outstanding_pings=2
    $conn connect
    # delete all PONGs sent by the server
    intercept $conn [dict create "PONG\r\n" {}] ""
    duration {
        # the client will send 2 PINGs without reply; when Pinger runs for the 3rd time, it will raise the error
        # and the client will go into reconnecting
        wait_for ${connNs}::status 4000
    } elapsed
    assert {[lastError $conn] eq "ErrStaleConnection"}
    assert {[$conn cget status] eq $nats::status_reconnecting} 1
    assert {[approx $elapsed 3000]}
} -cleanup {
    $conn disconnect
    $conn reset -ping_interval
    stopNats quick_ping
}

startNats NATS

# Recall that Tcl's internal representation of strings is not UTF-8, but some custom encoding
# You won't notice this as long as you have Tcl talking to other Tcl via NATS
# You WILL see corrupted strings as soon as Tcl receives UTF-8 from an external system
# this is "Eivør Pálsdóttir" encoded in UTF-8
set utf8_msg [encoding convertfrom utf-8 "\x45\x69\x76\xC3\xB8\x72\x20\x50\xC3\xA1\x6C\x73\x64\xC3\xB3\x74\x74\x69\x72"]
test extra_opts-6 "Check the utf8_convert option" -setup {
    set default_encoding [encoding system]
    encoding system utf-8  ;# needed for makeFile
    set ::tempFilePath [tcltest::makeFile $utf8_msg extra_opts-6.txt]
} -body {
    $conn connect
    $conn subscribe UTF8_TEST -callback subCallback
    wait_flush $conn
    execNatsCmd pub --force-stdin UTF8_TEST <$::tempFilePath 2>@1  ;# trying to pass UTF-8 just via CLI doesn't work
    wait_for ::inMsg
    test_utils::log::info "Got a corrupted UTF-8 message: $::inMsg"
    
    $conn configure -utf8_convert true
    execNatsCmd pub --force-stdin UTF8_TEST <$::tempFilePath 2>@1
    wait_for ::inMsg
    test_utils::log::info "Got a correct UTF-8 message: $::inMsg"  ;# this should be readable in the terminal
    
    set ::inMsg  ;# account for \n added by makeFile
} -result "$utf8_msg\n" -cleanup {
    $conn disconnect
    $conn reset -utf8_convert
    encoding system $default_encoding
}

test extra_opts-7.1 "Error handling when connection is closed" -body {
    assert {[$conn cget status] eq $nats::status_closed}
    try {
        $conn publish foo bar
    } trap {NATS ErrConnectionClosed} err {}
    set err
} -match glob -result {*No connection*}
    
test extra_opts-7.2 "connect -async allows to PUB/SUB" -body {
    # PUB/SUB/UNSUB are buffered and flushed after a connection is established
    $conn connect -async
    assert {[$conn cget status] eq $nats::status_connecting}
    $conn subscribe subject1 -callback subCallback
    $conn publish subject1 "hello"
    wait_for ::inMsg 1000
} -result "hello" -cleanup {
    $conn disconnect
}

$conn destroy
stopNats NATS
tcltest::cleanupTests
