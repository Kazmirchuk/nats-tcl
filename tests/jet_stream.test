# Copyright (c) 2021 ANT Solutions https://antsolutions.eu/

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# skip JetStream tests if NATS CLI is not available in $PATH
set nats_cli [catch {exec -ignorestderr nats --version}]
tcltest::testConstraint nats_cli [expr !$nats_cli]

set stream_name MY_STR
set consumer_name MY_CONS

test jet_stream-1.1 "Publish and sync consume" -constraints nats_cli -setup {
    startNats NATS_JS -js ;# start nats with Jet Stream    
    
    execNatsCmd stream add --subjects=test.* --storage memory --retention limits --discard old --max-msgs=20 --max-msgs-per-subject=-1 --max-msg-size=-1 --max-bytes=-1 --dupe-window=2m --max-age=-1 --replicas=1 $stream_name    
    execNatsCmd consumer add --ack=explicit --deliver=all --max-pending=100 --max-deliver=-1 --replay=instant --filter= --pull --wait=1s $stream_name $consumer_name
    
    set conn [nats::connection new]
    #debugLogging $conn
    $conn configure -servers nats://localhost:4222
    $conn connect
} -body {
    $conn publish test.1 "msg 1"
    set jet_stream [$conn jet_stream]
    set msg [$jet_stream consume $stream_name $consumer_name]
    #return only message
    dict get $msg data
} -result {msg 1}

test jet_stream-1.2 "Sync consume redelivered message" -constraints nats_cli -body {
    # message has not been ACK, so it should be redelivered
    set msg [$jet_stream consume $stream_name $consumer_name]
    dict get $msg data
} -result {msg 1}

test jet_stream-1.3 "Sync consume redelivered message and ACK" -constraints nats_cli -body {
    # message has not been ACK, so it should be redelivered
    set msg [$jet_stream consume $stream_name $consumer_name]
    $jet_stream ack $msg
    dict get $msg data
} -result {msg 1}

test jet_stream-1.4 "No message left after ACK - timeout" -constraints nats_cli -body {
    $jet_stream consume $stream_name $consumer_name -timeout 2000
} -match glob -result {Consume * timed out*} -returnCodes {error} -errorCode {NATS ErrTimeout}

test jet_stream-2 "Publish and async consume" -constraints nats_cli -body {
    $conn publish test.2 "msg 2"
    duration {
        $jet_stream consume $stream_name $consumer_name -callback test_utils::asyncReqCallback
    } elapsed
    assert {$elapsed < 50} ;# async request returns immediately
    
    wait_for test_utils::simpleMsg 5000
    dict get $test_utils::simpleMsg data
} -result {msg 2}

test jet_stream-3 "Async consume and ACK" -constraints nats_cli -body {
    duration {
        $jet_stream consume $stream_name $consumer_name -callback test_utils::asyncReqCallback
    } elapsed
    assert {$elapsed < 50} ;# async request returns immediately
    
    wait_for test_utils::simpleMsg 5000
    $jet_stream ack $test_utils::simpleMsg
    dict get $test_utils::simpleMsg data
} -result {msg 2}

test jet_stream-4 "Async consume timeout" -constraints nats_cli -body {
    duration {
        $jet_stream consume $stream_name $consumer_name -callback test_utils::asyncReqCallback -timeout 1500
    } elapsed
    assert {$elapsed < 50} ;# async request returns immediately
    
    duration {
        wait_for test_utils::simpleMsg 2000
    } elapsed
    assert {[approx $elapsed 1500]}

    set test_utils::simpleMsg
} -result {timeout}

test jet_stream-5 "Publish message to jet-stream sync" -constraints nats_cli -body {
    $jet_stream publish test.3 "msg 3"
} -result [dict create stream $stream_name seq 3]

test jet_stream-6 "Publish message to jet-stream async" -constraints nats_cli -body {
    duration {
        $jet_stream publish test.4 "msg 4" -callback [lambda {timedOut pubAck pubError} {
            set ::pubAck $pubAck
        }]
    } elapsed
    assert {$elapsed < 50}
    
    wait_for ::pubAck 1000
    set ::pubAck
} -result [dict create stream $stream_name seq 4]

test jet_stream-7 "Publish message to jet-stream sync timeout" -constraints nats_cli -body {
    $jet_stream publish not.exists "not.exists" -timeout 1000
} -result "No responders available for request" -returnCodes {error} -errorCode {NATS ErrNoResponders}

test jet_stream-8 "Publish message to jet-stream async timeout" -constraints nats_cli -body {
    duration {
        $jet_stream publish not.exists "not.exists" -timeout 500 -callback [lambda {timedOut pubAck pubError} {
            set ::timedOut $timedOut
        }]
    } elapsed
    assert {$elapsed < 50}
    duration {
        wait_for ::timedOut 1000
    } elapsed
    string is true -strict $timedOut
} -result {1} -cleanup {
    $conn destroy
    stopNats NATS_JS
}

tcltest::cleanupTests
