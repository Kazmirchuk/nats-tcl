# Copyright (c) 2021-2023 Petro Kazmirchuk https://github.com/Kazmirchuk
# Copyright (c) 2021 ANT Solutions https://antsolutions.eu/

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - sync, async publishing to a stream
# - fetching from a durable pull consumer with various ACK's
# - fetching a batch of messages under various scenarios
# - ordered consumers

source test_utils.tcl

package require logger::utils

set stream_name MY_STREAM
set consumer_name PULL_CONSUMER

startNats NATS --jetstream

# some test cases here check for logging output
set natsLogger [logger::init nats]
logger::utils::applyAppender -appender fileAppend -service nats -appenderArgs {-outputChannel [tcltest::outputChannel] -conversionPattern {%m}}
${natsLogger}::setlevel warn
set conn [nats::connection new "JS" -logger $natsLogger] ;# -log_chan [tcltest::outputChannel] -log_level debug]

# a test case with -output does not produce this output on the console, but sometimes it is useful for troubleshooting
set do_test_stdout 1  ;# set to 0 to see debug messages in the console
proc test_stdout {str} {
    if {!$::do_test_stdout} {
        return ""
    }
    if {$str eq ""} {
        return [list -output ""]
    }
    return [list -output "*$str*" -match glob]
}

$conn configure -servers nats://localhost:4222 -dictmsg true
$conn connect
set jet_stream [$conn jet_stream -timeout 1000]

test jet_stream-setup "Create a stream and a pull consumer" -body {
    set term_msgs 0
    $conn subscribe "\$JS.EVENT.ADVISORY.CONSUMER.MSG_TERMINATED.$stream_name.$consumer_name" -callback [lambda {subj msg reply} {
        incr ::term_msgs
    }]
    set response [$jet_stream add_stream $stream_name -subjects [list test.*]]
    assert {[dict get $response did_create]}
    set response [$jet_stream add_pull_consumer $stream_name $consumer_name -ack_wait 1000] ;# rather short ack_wait=1s
    assert {[dict get $response name] eq $consumer_name}
}

# these tests use only $js publish
# $js publish_msg is tested in jet_stream_mgmt.test
test jet_stream-1.1 "Publish a message to JetStream synchronously" -body {
    set pubAck [$jet_stream publish test.1 "msg 1" -timeout 800]
    dict get $pubAck seq
} -result 1

test jet_stream-1.2 "Publish a message to JetStream asynchronously" -body {
    $jet_stream publish test.1 "msg 2" -stream $stream_name -callback [lambda {timedOut pubAck pubError} {
        set ::pubAck $pubAck
    }]
    wait_for ::pubAck
    dict get $pubAck seq
} -result 2

test jet_stream-1.3 "Publish message to JetStream sync - no such stream" -body {
    $jet_stream publish no-stream "no stream"
} -result "No responders available for request" -errorCode {NATS ErrNoResponders} 

test jet_stream-1.4 "Publish message to JetStream async - wrong stream" -body {
    $jet_stream publish test.1 "msg 3" -stream NO_STREAM -callback [lambda {timedOut pubAck pubError} {
        set ::pubError $pubError
    }]
    wait_for ::pubError
    dict get $pubError err_code ;# expected stream does not match
} -result 10060 -cleanup {
    $jet_stream purge_stream $stream_name
}

test jet_stream-2.1 "Pull a message but no ack" -body {
    $jet_stream publish test.1 "msg 1"
    duration {
        set msgList [$jet_stream fetch $stream_name $consumer_name]
    } elapsed
    assert {$elapsed < 100}
    assert {[llength $msgList] == 1} 1
    set msg [lindex $msgList 0]
    assert {[nats::msg subject $msg] eq "test.1"} 1
    nats::msg data $msg
} -result "msg 1"

test jet_stream-2.2 "Pull a message and ack" -body {
    sleep 1100 ;# >ack_wait
    # message has not been ACK'ed, so it should be redelivered
    duration {
        set msgList [$jet_stream fetch $stream_name $consumer_name]
    } elapsed
    assert {$elapsed < 100}
    assert {[llength $msgList] == 1} 1
    set msg [lindex $msgList 0]
    assert {[nats::msg subject $msg] eq "test.1"} 1
    set metadata [nats::metadata $msg]
    assert {[dict get $metadata num_delivered] == 2} 1
    assert {[dict get $metadata num_pending] == 0} 1
    $jet_stream ack_sync $msg
    nats::msg data $msg
} -result "msg 1"

test jet_stream-2.3 "No message left after ACK - timeout" -body {
    duration {
        # force a client-side timeout that will raise ErrTimeout
        catch {$jet_stream fetch $stream_name $consumer_name -timeout 500 -expires 1000} err errOpts
    } elapsed
    assert {[approx $elapsed 500]}
    dict get $errOpts -errorcode
} -result {NATS ErrTimeout}

test jet_stream-2.4 "Pull a message and send in-progress" -body {
    $jet_stream publish test.2 "msg 2"
    set msg [lindex [$jet_stream fetch $stream_name $consumer_name] 0]
    assert {[nats::msg data $msg] eq "msg 2"} 1
    sleep 500
    $jet_stream in_progress $msg ;# reset the server's timer
    sleep 600
    llength [$jet_stream fetch $stream_name $consumer_name]
} -result 0 ;# NATS doesn't redeliver yet

test jet_stream-2.5 "Send nack with delay" -body {
    $jet_stream nak $msg -delay 2000
    duration {
        set msg [lindex [$jet_stream fetch $stream_name $consumer_name -batch_size 1 -expires 2100 -timeout 3000] 0]
    } elapsed
    assert {[approx $elapsed 2000]}
    assert {[nats::msg data $msg] eq "msg 2"} 1
    dict get [nats::metadata $msg] num_delivered
} -result 2

test jet_stream-2.6 "Send term" -body {
    assert {$term_msgs == 0}
    $jet_stream term $msg
    wait_for ::term_msgs
    # it doesn't look like consumer_info provides data to distinguish between ACK and TERM, but I can subscribe to a special subject
    set term_msgs
} -result 1

test jet_stream-3.1 "Fetch with no_wait - no messages" -setup {
    ${natsLogger}::setlevel debug
} -body {
    duration {
        set msgList [$jet_stream fetch $stream_name $consumer_name -batch_size 10]
    } elapsed
    assert {$elapsed < 100}
    llength $msgList
} -result 0 {*}[test_stdout "got status message 404"]

test jet_stream-3.2 "Fetch with no_wait - get some messages" -setup {
    foreach msg { 1 2 3 } {
        $jet_stream publish test.3 $msg -stream $stream_name
    }
} -body {
    duration {
        set msgList [$jet_stream fetch $stream_name $consumer_name -batch_size 10]
    } elapsed
    foreach msg $msgList {
        $jet_stream ack_sync $msg
    }
    assert {$elapsed < 100}
    llength $msgList
} -result 3 {*}[test_stdout "got status message 408"]

test jet_stream-3.3 "Fetch with no_wait - get all messages" -setup {
    foreach msg { 1 2 3 4 5 6 7 8 9 10 } {
        $jet_stream publish test.3 $msg -stream $stream_name
    }
} -body {
    duration {
        set msgList [$jet_stream fetch $stream_name $consumer_name -batch_size 10]
    } elapsed
    foreach msg $msgList {
        $jet_stream ack_sync $msg
    }
    assert {$elapsed < 100}
    llength $msgList
} -result 10 {*}[test_stdout ""] -cleanup {
    ${natsLogger}::setlevel warn
}

test jet_stream-4.1 "Fetch with expires - no messages" -setup {
    ${natsLogger}::setlevel debug
} -body {
    duration {
        set msgList [$jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 1000 -expires 500]
    } elapsed
    assert {[approx $elapsed 500]}
    llength $msgList
} -result 0 {*}[test_stdout "got status message 408"]

test jet_stream-4.2 "Fetch with expires - no messages - client-side timeout" -body {
    duration {
        catch {$jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 500 -expires 1000} err errOpts
    } elapsed
    assert {[approx $elapsed 500]}
    dict get $errOpts -errorcode
} -result {NATS ErrTimeout} {*}[test_stdout "pull request*timed out"]

test jet_stream-4.3 "Fetch with expires - get some messages" -setup {
    foreach msg { 1 2 3 } {
        $jet_stream publish test.4 $msg -stream $stream_name
    }
} -body {
    duration {
        set msgList [$jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 1000 -expires 500]
    } elapsed
    foreach msg $msgList {
        $jet_stream ack_sync $msg
        assert {[nats::msg subject $msg] eq "test.4"} 1
    }
    assert {[approx $elapsed 500]}
    llength $msgList
} -result 3 {*}[test_stdout "got status message 408"]

test jet_stream-4.4 "Fetch with expires - get all messages" -setup {
    foreach msg { 1 2 3 4 5 6 7 8 9 10 } {
        $jet_stream publish test.4 $msg -stream $stream_name
    }
} -body {
    duration {
        set msgList [$jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 1000 -expires 500]
    } elapsed
    foreach msg $msgList {
        $jet_stream ack_sync $msg
        assert {[nats::msg subject $msg] eq "test.4"} 1
        assert {[nats::msg data $msg] <= 10}
    }
    assert {$elapsed < 100}
    llength $msgList
} -result 10 {*}[test_stdout ""] -cleanup {
    ${natsLogger}::setlevel warn
}

test jet_stream-4.5 "Fetch from a stream that doesn't exist" -body {
    $jet_stream fetch BOGUS_STREAM BOGUS_CONSUMER -timeout 500
} -result {stream not found} -errorCode {NATS ErrStreamNotFound}

test jet_stream-4.6 "Fetch from a consumer that doesn't exist" -body {
    $jet_stream fetch $stream_name BOGUS_CONSUMER -timeout 500
} -result {consumer not found} -errorCode {NATS ErrConsumerNotFound}

test jet_stream-5.1 "Async fetch - no messages - expire" -setup {
    ${natsLogger}::setlevel debug
} -body {
    $jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 1000 -expires 500 -callback asyncReqCallback
    wait_for ::inMsg 600
    set inMsg
} -result timeout {*}[test_stdout "got status message 408"]

test jet_stream-5.2 "Async fetch - no messages - client-side timeout" -body {
    $jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 500 -expires 1000 -callback asyncReqCallback
    wait_for ::inMsg 600
    set inMsg
} -result timeout {*}[test_stdout "pull request*timed out"]

set autoAckCallback [lambda {js timedOut msg} {
    lappend ::gotMsgs [list $timedOut $msg]
    if {!$timedOut} {
        $js ack_sync $msg
    }
} $jet_stream]

test jet_stream-5.3 "Async fetch - get some messages then expire" -setup {
    set gotMsgs [list]
    foreach msg { 1 2 3 } {
        $jet_stream publish test.5 $msg -stream $stream_name
    }
} -body {
    duration {
        # the callback will be invoked 3 times with a message and the 4th time with timedOut=1 and a status message 408
        $jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 1000 -expires 500 -callback $autoAckCallback
        # note that while+wait_for each individual message is unreliable,
        # because the callback may be invoked many times before wait_for returns, so we would miss some messages
        while {[llength $gotMsgs] < 4} {
            wait_for ::gotMsgs 1000
        }
    } elapsed
    assert {[approx $elapsed 500]}
    assert {[llength $gotMsgs] == 4} 1
    for {set i 0} {$i < 3} {incr i} {
        lassign [lindex $gotMsgs $i] timedOut msg
        assert {[nats::msg subject $msg] eq "test.5"} 1
        assert {!$timedOut}
    }
    lassign [lindex $gotMsgs 3] timedOut msg
    assert {$timedOut}
    nats::header lookup $msg Status ""
} -result 408 {*}[test_stdout "got status message 408"]

test jet_stream-5.4 "Async fetch - get some messages then timeout" -setup {
    set gotMsgs [list]
    foreach msg { 1 2 3 } {
        $jet_stream publish test.5 $msg -stream $stream_name
    }
} -body {
    duration {
        # the callback will be invoked 3 times with a message and the 4th time with timedOut=1
        $jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 500 -expires 1000 -callback $autoAckCallback
        while {[llength $gotMsgs] < 4} {
            wait_for ::gotMsgs 1000
        }
    } elapsed
    assert {[approx $elapsed 500]}
    assert {[llength $gotMsgs] == 4} 1
    for {set i 0} {$i < 3} {incr i} {
        lassign [lindex $gotMsgs $i] timedOut msg
        assert {[nats::msg subject $msg] eq "test.5"} 1
        assert {!$timedOut}
    }
    lassign [lindex $gotMsgs 3] timedOut msg
    assert {$timedOut}
    set msg
} -result "" {*}[test_stdout "pull request*timed out"]
                
test jet_stream-5.5 "Async fetch - get all messages" -setup {
    set gotMsgs [list]
    foreach msg { 1 2 3 4 5 6 7 8 9 10 } {
        $jet_stream publish test.5 $msg -stream $stream_name
    }
} -body {
    duration {
        $jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 1000 -expires 500 -callback $autoAckCallback
        while {[llength $gotMsgs] < 10} {
            wait_for ::gotMsgs 1000
        }
    } elapsed
    assert {$elapsed < 500}
    foreach elem $gotMsgs {
        lassign $elem timedOut msg
        assert {!$timedOut}
        assert {[nats::msg subject $msg] eq "test.5"}
    }
    llength $gotMsgs
} -result 10 {*}[test_stdout ""] -cleanup {
    ${natsLogger}::setlevel warn
}

test jet_stream-5.6 "Async fetch with no_wait - no messages" -setup {
    ${natsLogger}::setlevel debug
    set gotMsgs [list]
} -body {
    $jet_stream fetch $stream_name $consumer_name -batch_size 10 -callback $autoAckCallback
    wait_for ::gotMsgs 100
    lassign [lindex $gotMsgs 0] timedOut msg
    assert {$timedOut}
    nats::header lookup $msg Status ""
} -result 404 {*}[test_stdout "got status message 404"] -cleanup {
    ${natsLogger}::setlevel warn
}

# sync fetches are better in such cases, because they report an actual error instead of a generic timeout
test jet_stream-6.1 "Async fetch from a stream that doesn't exist" -body {
    $jet_stream fetch BOGUS_STREAM BOGUS_CONSUMER -timeout 500 -callback asyncReqCallback
    wait_for ::inMsg 600  ;# allow 100ms tolerance
    set inMsg
} -result timeout

test jet_stream-6.2 "Async fetch from a consumer that doesn't exist" -body {
    $jet_stream fetch $stream_name BOGUS_CONSUMER -timeout 500 -callback asyncReqCallback
    wait_for ::inMsg 600
    set inMsg
} -result timeout

test jet_stream-7 "Cancel a pull request" -setup {
    set gotMsgs [list]
} -body {
    set fetchID [$jet_stream fetch $stream_name $consumer_name -batch_size 10 -callback $autoAckCallback -timeout 1000]
    sleep 500
    $jet_stream cancel_pull_request $fetchID
    sleep 1000
    llength $gotMsgs
} -result 0

# since the pull consumer is deleted here, it must be the last test in the series
test jet_stream-8.1 "Async fetch - get some messages then delete the consumer" -setup {
    set gotMsgs [list]
    foreach msg { 1 2 3 } {
        $jet_stream publish test.5 $msg -stream $stream_name
    }
} -body {
    after 1000 [list $jet_stream delete_consumer $stream_name $consumer_name]
    duration {
        set fetchID [$jet_stream fetch $stream_name $consumer_name -batch_size 10 -timeout 2000 -callback $autoAckCallback]
        while {[llength $gotMsgs] < 3} {
            wait_for ::gotMsgs 1000
        }
    } elapsed
    assert {$elapsed < 500}
    foreach elem $gotMsgs {
        lassign $elem timedOut msg
        assert {!$timedOut}
        assert {[nats::msg subject $msg] eq "test.5"}
    }
    wait_for ::gotMsgs 1500 ;# once the consumer is deleted, we get a status message 409 
    lassign [lindex $gotMsgs end] timedOut msg
    assert {[nats::header get $msg Status] == 409} 1
    assert {[nats::header get $msg Description] eq "Consumer Deleted"} 1
    assert {$timedOut}
    $jet_stream cancel_pull_request $fetchID  ;# the fetch is done by now
} -result "Invalid fetch ID*" -match glob -errorCode {NATS ErrInvalidArg}

test jet_stream-8.2 "Check there are no pending pull requests left" -body {
    assert {[llength [info class instances nats::AsyncPullRequest]] == 0} 1
    assert {[llength [info class instances nats::SyncPullRequest]] == 0} 1
    array size ${conn}::requests
} -result 0

$conn destroy ;# from now on use usual logging

# ------------------------------- ORDERED CONSUMERS --------------------------------------
proc consumerCallback {msg} {
    lappend ::gotMsgs $msg ;# no ACK needed when using Ordered Consumer
}

# catching specific messages in the socket using "intercept" is tedious
# instead we override message handling in nats::ordered_consumer
proc intercept_msg {obj} {
    oo::objdefine $obj {
        method OnMsg {subj msg reply} {
            # MsgFilter returns true if the message should be dropped
            if {![MsgFilter $msg]} {
                next $subj $msg $reply
            }
        }
    }
}
proc intercept_clear {obj} {
    oo::objdefine $obj {
        deletemethod OnMsg
    }
}

set conn [nats::connection new "OrderedConsumer" -log_chan [tcltest::outputChannel]]
$conn configure -servers nats://localhost:4222 -dictmsg true
$conn connect
set jet_stream [$conn jet_stream -timeout 1000]

test jet_stream-9.1 "Ordered consumer - no such stream" -body {
    $jet_stream ordered_consumer BOGUS_STREAM -callback consumerCallback
} -result {stream not found} -errorCode {NATS ErrStreamNotFound}

test jet_stream-9.2 "Ordered consumer - nominal case" -body {
    set gotMsgs [list]
    # publish a few messages *before* creating the consumer
    foreach msg { 1 2 3 } {
        $jet_stream publish test.9 $msg -stream $stream_name
    }
    duration {
        set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -description "Ordered consumer" -filter_subject test.9]
        while {[llength $gotMsgs] < 3} {
            wait_for ::gotMsgs
        }
    } elapsed
    assert {$elapsed < 500}
    assert {[llength $gotMsgs] == 3} 1
    set myconfig [dict get [$cons info] config]
    set consumerConfig [dict get [$jet_stream consumer_info $stream_name [$cons name]] config]
    assert {[dict_in $myconfig $consumerConfig]}
    # publish a few messages *while* we have the consumer
    foreach msg { 4 5 6 } {
        $jet_stream publish test.9 $msg -stream $stream_name
    }
    duration {
        while {[llength $gotMsgs] < 6} {
            wait_for ::gotMsgs
        }
    } elapsed
    assert {$elapsed < 500}
    assert {[lastError $cons] eq ""} 1
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2 3 4 5 6} -cleanup {
    $cons destroy
}

test jet_stream-10 "Ordered consumer - reset - missing heartbeats" -body {
    proc MsgFilter {msg} {
        return [nats::msg idle_heartbeat $msg]  ;# drop all HB
    }
    set gotMsgs [list]
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.10 -idle_heartbeat 300]
    set consumerName [$cons name]
    foreach msg { 1 2 3 } {
        $jet_stream publish test.10 $msg -stream $stream_name
    }
    while {[llength $gotMsgs] < 3} {
        wait_for ::gotMsgs
    }
    intercept_msg $cons
    wait_for ${cons}::last_error 1200  ;# wait for at least hb interval * 3
    intercept_clear $cons
    assert {[lastError $cons] eq "ErrConsumerNotActive"} 1
    # reset in progress; meanwhile publish more messages
    foreach msg { 4 5 6 } {
        $jet_stream publish test.10 $msg -stream $stream_name
    }
    while {[llength $gotMsgs] < 6} {
        wait_for ::gotMsgs
    }
    assert {$consumerName ne [$cons name]} 1  ;# check that the push consumer was recreated
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2 3 4 5 6} -cleanup {
    rename MsgFilter ""
    $cons destroy
}

test jet_stream-11 "Ordered consumer - reset - sequence mismatch in HB" -body {
    proc MsgFilter {msg} {
        return [expr {[nats::msg data $msg] == 3}]  ;# drop the 3rd message
    }
    set gotMsgs [list]
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.11 -idle_heartbeat 500]
    set consumerName [$cons name]
    intercept_msg $cons
    foreach msg { 1 2 3 } {
        $jet_stream publish test.11 $msg -stream $stream_name
    }
    # the 1st HB triggers a reset
    wait_for ${cons}::last_error 800
    intercept_clear $cons
    assert {[lastError $cons] eq "ErrConsumerSequenceMismatch"} 1
    while {[llength $gotMsgs] < 3} {
        wait_for ::gotMsgs
    }
    assert {$consumerName ne [$cons name]} 1  ;# check that the push consumer was recreated
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2 3} -cleanup {
    rename MsgFilter ""
    $cons destroy
}

test jet_stream-12 "Ordered consumer - reset - sequence mismatch in a message" -body {
    proc MsgFilter {msg} {
        return [expr {[nats::msg data $msg] == 2}]  ;# drop the 2nd message
    }
    set gotMsgs [list]
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.12]
    set consumerName [$cons name]
    intercept_msg $cons
    foreach msg { 1 2 3 } {
        $jet_stream publish test.12 $msg -stream $stream_name
    }
    # the 3rd message triggers a reset
    wait_for ${cons}::last_error
    intercept_clear $cons
    assert {[lastError $cons] eq "ErrConsumerSequenceMismatch"} 1
    while {[llength $gotMsgs] < 3} {
        wait_for ::gotMsgs 1000
    }
    assert {$consumerName ne [$cons name]} 1  ;# check that the push consumer was recreated
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2 3} -cleanup {
    rename MsgFilter ""
    $cons destroy
}

test jet_stream-13 "Ordered consumer - reset - server restart" -body {
    set gotMsgs [list]
    set allErrors [list]
    $jet_stream publish test.13 1 -stream $stream_name
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.13 -idle_heartbeat 300]
    trace add variable ${cons}::last_error write errorTrace
    set ${cons}::RetryInterval 700 ;# default interval 10s is recommended for production, but it's too long for the test
    wait_for ::gotMsgs
    stopNats NATS
    # consumer resets but fails to create a new push consumer due to a timeout
    wait_for ::allErrors 2000
    startNats NATS --jetstream
    wait_for ${cons}::Name 2000 ;# wait until the consumer recreates the subscription
    assert {$allErrors eq {ErrConsumerNotActive ErrTimeout ErrConsumerNotActive}}
    $jet_stream publish test.13 2 -stream $stream_name
    wait_for ::gotMsgs 500
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2} -cleanup {
    $cons destroy
}

test jet_stream-14 "Ordered consumer - reset - stream deleted" -body {
    set gotMsgs [list]
    set allErrors [list]
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.14 -idle_heartbeat 500]
    trace add variable ${cons}::last_error write errorTrace
    $jet_stream delete_stream $stream_name
    while {[llength $allErrors] < 2} {
        wait_for ::allErrors 2000
    }
    assert {$allErrors eq {ErrConsumerNotActive ErrStreamNotFound}}
    assert {[$cons name] eq ""}
} -cleanup {
    $cons destroy
}
# TODO connection lost+quick reconnect without push consumer lost
$jet_stream destroy
$conn destroy
stopNats NATS
cleanupTests
