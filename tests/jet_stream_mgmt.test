# Copyright (c) 2022-2023 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - actions on a stream: create, get info, get names, purge, delete
# - actions on a pull consumer: create, get info, get names, delete
# - actions on a message: get, delete
source test_utils.tcl

startNats NATS --jetstream --store_dir [tcltest::temporaryDirectory]
set conn [nats::connection new "JS_mgmt" -log_chan [tcltest::outputChannel]]
$conn configure -servers nats://localhost:4222
$conn connect
set js [$conn jet_stream -timeout 2000]

# duplicate_window is in ms
set stream_config [dict create \
                     description "My test stream" \
                     subjects [list test.*] \
                     max_msg_size 1000000 \
                     storage memory \
                     num_replicas 1 \
                     duplicate_window 120000 \
                     discard new \
                     max_consumers 100 \
                     max_msgs 10000 \
                     max_msgs_per_subject 1000 \
                     retention workqueue]
    
test js_mgmt-1.1 "Create a stream" -body {
    set response [$js add_stream MY_STREAM {*}$stream_config]
    assert {[dict get $response did_create]}
    set actual_config [dict get $response config]
    set state [dict get $response state]
    assert {[dict_in $stream_config $actual_config]}
    assert {[dict get $state messages] == 0}
    assert {[dict get $state first_seq] == 0}
}

test js_mgmt-1.2 "Create another stream" -body {
    set foo_config $stream_config
    dict set foo_config subjects [list foo.*]
    dict set foo_config deny_purge true
    set response [$js add_stream FOO_STREAM {*}$foo_config]
    assert {[dict get $response did_create]}
}

test js_mgmt-1.3 "Try creating a stream with the same name" -body {
    $js add_stream MY_STREAM {*}$foo_config
} -result {*stream name already in use*} -match glob -errorCode {NATS ErrJSResponse 400*}

test js_mgmt-1.4 "Try creating a stream with a wrong configuration" -body {
    set invalid_config $stream_config
    dict set invalid_config subjects [list bla.*]
    dict set invalid_config storage invalid
    $js add_stream MY_STREAM2 {*}$invalid_config
} -result {*enum storage*} -match glob -errorCode {NATS ErrInvalidArg}

test js_mgmt-1.5 "Try creating a stream with an overlapping subject" -body {
    set invalid_config $stream_config
    dict set invalid_config subjects [list test.1 bla.*]
    $js add_stream MY_STREAM2 {*}$invalid_config
} -result {*subjects overlap*} -match glob -errorCode {NATS ErrJSResponse 400*}

test js_mgmt-2 "Get stream information" -setup {
    # send some messages to both streams
    $js publish test.1 "test msg 1"
    $js publish test.2 "test msg 2"
    $js publish foo.1 "foo msg 1"
} -body {
    set response [$js stream_info MY_STREAM]
    set api_conf [dict get $response config]
    set api_state [dict get $response state]
    # get the same info from NATS CLI and check that they are in line
    set cli_info [json::json2dict [execNatsCmd stream info -j MY_STREAM]]
    # cli_info contains values in ns; convert them to ms
    set cli_config [dict get $cli_info config]
    nats::_ns2ms cli_config duplicate_window max_age
    set cli_state [dict get $cli_info state]
    assert {[dict get $api_state messages] == 2}
    assert {[dict get $api_state num_subjects] == 2}
    assert {[dict_in $api_conf $cli_config]}
    assert {[dict_in $api_state $cli_state]}
}

test js_mgmt-3.1 "List all streams" -body {
    lsort [$js stream_names]
} -result {FOO_STREAM MY_STREAM}

test js_mgmt-3.2 "Search for a stream by subject" -body {
    $js stream_names -subject foo.1
} -result FOO_STREAM

test js_mgmt-3.3 "Search for a stream by subject - nothing found" -body {
    $js stream_names -subject bla
} -result ""

test js_mgmt-4.1 "Purge a stream using a subject filter" -body {
    $js purge_stream MY_STREAM -filter test.1 ;# returns number of purged messages
} -result 1

test js_mgmt-4.2 "Purge a stream entirely" -body {
    $js purge_stream MY_STREAM
} -result 1

test js_mgmt-4.3 "Try purging a stream with deny_purge=true" -body {
    $js purge_stream FOO_STREAM
} -result {*purge not permitted*} -match glob -errorCode {NATS ErrJSResponse 500*}

test js_mgmt-5.1 "Delete a stream" -body {
    $js delete_stream FOO_STREAM
} -result true

test js_mgmt-5.2 "Delete a stream that doesn't exist" -body {
    $js delete_stream BLA_STREAM
} -result {*stream not found*} -match glob -errorCode {NATS ErrJSResponse 404*}

# filter_subjects of different consumers must not overlap!
# NB! I'm using "name" here instead of "durable_name"
set pull_consumer_config [dict create \
                         description "dummy pull consumer" \
                         filter_subject test.1 \
                         deliver_policy all \
                         ack_policy explicit \
                         ack_wait 10000 \
                         max_deliver -1 \
                         replay_policy instant \
                         max_waiting 100 \
                         max_ack_pending 1000 \
                         durable_name PULL_CONSUMER]


set push_consumer_config [dict create \
                         description "dummy push consumer" \
                         filter_subject test.2 ]

test js_mgmt-6.1 "Add a pull consumer with durable_name" -body {
    # keep this unit test to check that durable_name works properly
    set response [$js add_consumer MY_STREAM {*}$pull_consumer_config]
    set actual_config [dict get $response config]
    assert {[dict_in $pull_consumer_config $actual_config]}
    dict get $response name
} -result PULL_CONSUMER

test js_mgmt-6.2 "Add a pull consumer using add_pull_consumer" -body {
    dict unset pull_consumer_config durable_name 
    dict set pull_consumer_config filter_subject test.3
    set response [$js add_pull_consumer MY_STREAM PULL_CONSUMER_2 {*}$pull_consumer_config]
    dict get $response name
} -result PULL_CONSUMER_2

test js_mgmt-6.3 "Add a push consumer" -body {
    set response [$js add_push_consumer MY_STREAM PUSH_CONSUMER PUSH_CONSUMER_SUBJECT {*}$push_consumer_config]
    set actual_config [dict get $response config]
    assert {[dict_in $push_consumer_config $actual_config]}
    dict get $response name
} -result PUSH_CONSUMER
# NB! calling add_consumer with a name of existing consumer will update its config instead of creating a new consumer

test js_mgmt-6.4 "Try creating a consumer with a wrong configuration - error when parsing args" -body {
    set invalid_config $pull_consumer_config
    dict set invalid_config durable_name INVALID_CONSUMER
    dict set invalid_config deliver_policy invalid
    $js add_consumer MY_STREAM1 {*}$invalid_config
} -result {*enum deliver_policy*} -match glob -errorCode {NATS ErrInvalidArg} -cleanup {
    dict unset invalid_config deliver_policy
}

test js_mgmt-6.5 "Try creating a pull consumer with flow control" -body {
    dict set invalid_config filter_subject test.4
    dict set invalid_config flow_control true
    $js add_pull_consumer MY_STREAM INVALID_CONSUMER {*}$invalid_config
    # consumer flow control requires a push based consumer
} -result {*flow control*} -match glob -errorCode {NATS ErrJSResponse 400*}

test js_mgmt-6.6 "Try creating a pull consumer with idle heartbeat" -body {
    dict set invalid_config idle_heartbeat 6000
    $js add_pull_consumer MY_STREAM INVALID_CONSUMER {*}$invalid_config
    # consumer idle heartbeat requires a push based consumer
} -result {*idle heartbeat*} -match glob -errorCode {NATS ErrJSResponse 400*}

test js_mgmt-7.1 "Get consumer info" -setup {
    $js publish test.1 "test msg 1"
    $js publish test.1 "test msg 2"
} -body {
    set response [$js consumer_info MY_STREAM PULL_CONSUMER]
    set api_conf [dict get $response config]
    # get the same info from NATS CLI and check that they are in line
    set cli_info [json::json2dict [execNatsCmd consumer info -j MY_STREAM PULL_CONSUMER]]
    # cli_info contains values in ns; convert them to ms
    set cli_config [dict get $cli_info config]
    nats::_ns2ms cli_config ack_wait
    assert {[dict get $response num_pending] == 2}
    #assert {[dict_in $api_conf $cli_config]}
    # new NATS versions add new properties that may break the test, so check only a subset of them
    foreach prop {durable_name description deliver_policy ack_policy ack_wait filter_subject replay_policy num_replicas} {
        assert {[dict get $api_conf $prop] == [dict get $cli_config $prop]}
    }
    assert {[dict_in [dict get $response delivered] [dict get $cli_info delivered]]}
    assert {[dict_in [dict get $response ack_floor] [dict get $cli_info ack_floor]]}    
    dict get $response name
} -result PULL_CONSUMER

test js_mgmt-8.1 "List all consumers in MY_STREAM" -body {
    lsort [$js consumer_names MY_STREAM]
} -result "PULL_CONSUMER PULL_CONSUMER_2 PUSH_CONSUMER"

test js_mgmt-9.1 "Delete a consumer" -body {
    $js delete_consumer MY_STREAM PUSH_CONSUMER
} -result true

test js_mgmt-9.2 "Delete a consumer that doesn't exist" -body {
    $js delete_consumer MY_STREAM BLA
} -result {*consumer not found*} -match glob -errorCode {NATS ErrJSResponse 404*}

test js_mgmt-10.1 "Get a message directly from a stream" -setup {
    set out_msg [nats::msg create test.1 -data "msg 1"]
    nats::header set out_msg KEY1 VAL1 KEY2 "VAL 2"
    $js publish_msg $out_msg
} -body {
    set msg [$js stream_msg_get MY_STREAM -last_by_subj test.1]
    assert {[llength [nats::header keys $msg]] == 2}
    assert {[nats::header get $msg KEY1] eq "VAL1"}
    assert {[nats::header get $msg KEY2] eq "VAL 2"}
    nats::msg data $msg
} -result "msg 1"

test js_mgmt-11.1 "Delete a message directly from a stream" -body {
    $js stream_msg_delete MY_STREAM -seq [nats::msg seq $msg]  ;# if not found, this will throw ErrJSResponse 400
} -result true

test js_mgmt-12.1 "Create stream that mirrors another one" -body {
    set response [$js add_stream MY_STREAM_MIRROR -mirror [dict create name MY_STREAM]]
    assert {[dict get $response did_create]}
    set actual_config [dict get $response config]
    assert {[dict get $actual_config mirror] == [dict create name MY_STREAM]}
} -cleanup {
    $js delete_stream MY_STREAM_MIRROR
}

test js_mgmt-12.2 "Create stream that sources another one" -body {
    set response [$js add_stream MY_STREAM_SOURCES -sources [list [dict create name MY_STREAM]]]
    assert {[dict get $response did_create]}
    set actual_config [dict get $response config]
    assert {[dict get $actual_config sources] == [list [dict create name MY_STREAM]]}
} -cleanup {
    $js delete_stream MY_STREAM_SOURCES
}

$js destroy
$conn destroy
stopNats NATS
tcltest::cleanupTests
