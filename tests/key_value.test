# Copyright (c) 2023 Petro Kazmirchuk https://github.com/Kazmirchuk
# Copyright (c) 2023 ANT Solutions https://antsolutions.eu/

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - put
# - get/get_value
# - create/update
# - delete/purge
# - UTF8 conversion

source test_utils.tcl

set bucket MY_TEST_BUCKET
startNats NATS_JS --jetstream --store_dir [tcltest::temporaryDirectory]
execNatsCmd kv add $bucket --history=5

set conn [nats::connection new "KV" -log_chan [tcltest::outputChannel]]
$conn configure -servers nats://localhost:4222
$conn connect
set js [$conn jet_stream]
set kv [$js bind_kv_bucket $bucket]

test key_value-put-1 "Put a key" -body {
    $kv put key1 value1
} -result 1

# If a bucket is deleted after binding, all KV methods throw ErrBucketNotFound
test key_value-deleted-bucket-1 "'put' throws ErrBucketNotFound" -setup {
    $js create_kv_bucket dummy
    set dummy_kv [$js bind_kv_bucket dummy]
    $js delete_kv_bucket dummy
} -body {
    $dummy_kv put key1 value1
} -result * -match glob -errorCode {NATS ErrBucketNotFound}

test key_value-deleted-bucket-2 "'get' throws ErrBucketNotFound" -body {
    $dummy_kv get key1
} -result * -match glob -errorCode {NATS ErrBucketNotFound}

test key_value-deleted-bucket-3 "'create' throws ErrBucketNotFound" -body {
    $dummy_kv create key1 value1
} -result * -match glob -errorCode {NATS ErrBucketNotFound}

test key_value-deleted-bucket-4 "'update' throws ErrBucketNotFound" -body {
    $dummy_kv update key1 value1 1
} -result * -match glob -errorCode {NATS ErrBucketNotFound}

test key_value-deleted-bucket-5 "'delete' throws ErrBucketNotFound" -body {
    $dummy_kv delete key1
} -result * -match glob -errorCode {NATS ErrBucketNotFound}

test key_value-deleted-bucket-6 "'purge' throws ErrBucketNotFound" -body {
    $dummy_kv purge key1
} -result * -match glob -errorCode {NATS ErrBucketNotFound} -cleanup {
    $dummy_kv destroy
}

test key_value-get-1 "Get an entry for the key" -body {
    $kv get key1
} -match glob -result [dict create bucket $bucket key key1 value value1 revision 1 created * delta {} operation PUT]

test key_value-get-2 "Get an entry for the key with a specific revision" -setup {
    $kv put key1 value2
    $kv put key1 target_value
    $kv put key1 value4
} -body {
    $kv get key1 -revision 3
} -match glob -result [dict create bucket $bucket key key1 value target_value revision 3 created * delta {} operation PUT]

test key_value-get-3 "Try to get a key that doesn't exist" -body {
    $kv get key2
} -result * -match glob -errorCode {NATS ErrKeyNotFound}

test key_value-get-4 "Try to get a revision that doesn't exist" -body {
    set rev [$kv put key2 value2]
    incr rev
    $kv get key2 -revision $rev
} -result * -match glob -errorCode {NATS ErrKeyNotFound}

test key_value-get-5 "Throw ErrInvalidArg for a bad key name" -body {
    $kv get "???"
} -result * -match glob -errorCode {NATS ErrInvalidArg}

test key_value-get_value-1 "Get a value for the key" -body {
    $kv get_value key2
} -result value2

test key_value-create-1 "Create a key IIF it doesn't exist" -body {
    $kv create key3 value3
    $kv get_value key3
} -result value3

test key_value-create-2 "Try to create the same key again" -body {
    $kv create key3 value1
} -result * -match glob -errorCode {NATS ErrWrongLastSequence}

test key_value-create-3 "Delete the key and create again" -body {
    $kv delete key3
    $kv create key3 value1
    $kv get_value key3
} -result value1

# need to call this outside of -setup so that $rev is available to -result
$js empty_kv_bucket $bucket
set rev [$kv put key1 some_val]
test key_value-update-1 "Update a key" -body {
    $kv update key1 value1 $rev
} -result [expr {$rev+1}]

test key_value-update-2 "Try to update a key with a wrong revision" -body {
    $kv update key1 value2 1
} -result * -match glob -errorCode {NATS ErrWrongLastSequence}

$js empty_kv_bucket $bucket
$kv put key1 value1
test key_value-delete-1 "Delete a key" -body {
    $kv delete key1
} -result {}

test key_value-delete-2 "Delete a key with the specific revision" -body {
    set rev [$kv put key2 value2]
    $kv delete key2 $rev
    $kv get key2
} -result * -match glob -errorCode {NATS ErrKeyNotFound}

test key_value-delete-3 "Try to delete a key with a wrong revision" -body {
    set rev [$kv put key2 value2]
    $kv delete key2 [expr {$rev+1}]
} -result * -match glob -errorCode {NATS ErrWrongLastSequence}

test key_value-revert-1 "Revert the key" -body {
    $kv put key2 new_value
    set new_revision [$kv revert key2 $rev]
    $kv get_value key2
} -result value2

# this is "Mężny bądź, chroń pułk twój i sześć flag" (Polish pangram) encoded in UTF-8
set utf8_value [encoding convertfrom utf-8 "\x4d\xc4\x99\xc5\xbc\x6e\x79\x20\x62\xc4\x85\x64\xc5\xba\x2c\x20\x63\x68\x72\x6f\xc5\x84\x20\x70\x75\xc5\x82\x6b\x20\x74\x77\xc3\xb3\x6a\x20\x69\x20\x73\x7a\x65\xc5\x9b\xc4\x87\x20\x66\x6c\x61\x67"]
# see also test extra_opts-6
test key_value-utf8 "Get a UTF-8 encoded value from a bucket" -setup {
    set def_system [encoding system]
    encoding system utf-8 ;# needed for makeFile
    set ::tempFilePath [tcltest::makeFile $utf8_value key-value.txt]
    set def_chan [chan configure [tcltest::outputChannel] -encoding]
    chan configure [tcltest::outputChannel] -encoding utf-8
} -body {
    execNatsCmd pub --force-stdin "\$KV.$bucket.MY_KEY" <$::tempFilePath 2>@1
    [logger::servicecmd test_utils]::info "Got a corrupted UTF-8 message: [$kv get_value MY_KEY]"
    $conn configure -utf8_convert true
    set value [$kv get_value MY_KEY]
    [logger::servicecmd test_utils]::info "Got a correct UTF-8 message: $value"  ;# this should be readable in the terminal
    set value  ;# account for \n added by makeFile
} -result "$utf8_value\n" -cleanup {
    $conn disconnect
    $conn reset -utf8_convert
    encoding system $def_system
    chan configure [tcltest::outputChannel] -encoding $def_chan
}

$kv destroy
$js destroy
$conn destroy
stopNats NATS_JS
tcltest::cleanupTests
