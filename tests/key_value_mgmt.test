# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.
source test_utils.tcl

set bucket MY_TEST_BUCKET
startNats NATS_JS -js --store_dir [tcltest::temporaryDirectory];# start nats with Jet Stream

set conn [nats::connection new]
$conn configure -servers nats://localhost:4222
$conn connect
set js [$conn jet_stream]

# cleanup if previous test has not cleaned up correctly
set ls [execNatsCmd kv ls]
if {$bucket in $ls} {
    execNatsCmd kv del $bucket -f
}

########### BIND ###########

test key_value_mgmt-bind-1 "Bind to bucket" -setup {
    execNatsCmd kv add $bucket
} -body {
    set kv [$js bind_kv_bucket $bucket]
    return
} -result "" -cleanup {
    execNatsCmd kv del $bucket -f
}

test key_value_mgmt-bind-2 "Throw when binding to non existing bucket" -body {
    if {![catch {
        $js bind_kv_bucket "non-existing-bucket"
    } err errOpts]} {
        throw {TEST DidNotThrow} "Did not throw"
    }
    assert {[dict get $errOpts -errorcode] eq {NATS BucketNotFound}}
    set err
} -result "Bucket non-existing-bucket not found"

########### CREATE ###########

test key_value_mgmt-create-1 "Create bucket and check its info" -body {
    set kv [$js create_kv_bucket $bucket]
    set status [$kv status]

    set store_config [dict get $status store_config]
    set store_state [dict get $status store_state]
    set created [dict get $status created]

    # "created" date is almost "now"
    assert {abs([clock milliseconds] - $created) < 5000}

    dict unset status store_config
    dict unset status store_state
    dict unset status created

    # get the same info from NATS CLI and check that they are in line
    set cli_info [json::json2dict [execNatsCmd stream info -j KV_${bucket}]]

    # cli_info contains values in ns; convert them to ms
    set cli_config [dict get $cli_info config]

    # contains non-important information
    dict unset store_config placement

    nats::_ns2ms cli_config duplicate_window max_age
    set cli_state [dict get $cli_info state]
    assert {[dict get $store_state messages] == 0}

    assert {[dict_in $store_config $cli_config]}
    assert {[dict_in $store_state $cli_state]}
    assert {[dict_in $status [dict create \
        bucket $bucket \
        stream KV_${bucket} \
        storage file \
        history 1 \
        ttl 0 \
        max_value_size -1 \
        max_bucket_size -1 \
        values_stored 0 \
        bytes_stored 0 \
        backing_store JetStream]]}

    execNatsCmd kv info $bucket
} -result "*Information for Key-Value Store Bucket $bucket*" -match glob -cleanup {
    execNatsCmd kv del $bucket -f
}

test key_value_mgmt-create-2 "Create bucket with specified arguments" -body {
    set kv [$js create_kv_bucket $bucket -history 5 -storage memory -ttl 200000000000 -max_value_size 1000 -max_bucket_size 2000]
    set status [$kv status]

    assert {[dict get $status history] == 5}
    assert {[dict get $status storage] == "memory"}
    assert {[dict get $status ttl] == 200000000000}
    assert {[dict get $status max_value_size] == 1000}
    assert {[dict get $status max_bucket_size] == 2000}

    execNatsCmd kv info $bucket
} -result "*Information for Key-Value Store Bucket $bucket*" -match glob -cleanup {
    execNatsCmd kv del $bucket -f
}

test key_value_mgmt-create-3 "Throw when creating bucket with unknown arguments" -body {
    if {![catch {
        $js create_kv_bucket $bucket -unknown something
    } err errOpts]} {
        throw {TEST DidNotThrow} "Did not throw"
    }
    assert {[dict get $errOpts -errorcode] eq {NATS ErrInvalidArg}}
    set err
} -result {*Unknown option*} -match glob

test key_value_mgmt-create-4 "Throw when creating bucket with wrong -history argument" -body {
    if {![catch {
        $js create_kv_bucket $bucket -history 0
    } err errOpts]} {
        throw {TEST DidNotThrow} "Did not throw"
    }
    assert {[dict get $errOpts -errorcode] eq {NATS ErrInvalidArg}}
    set err
} -result "history must be greater than 0"

########### DELETE ###########

test key_value_mgmt-delete-1 "Delete bucket" -setup {
    execNatsCmd kv add $bucket
} -body {
    $js delete_kv_bucket $bucket 

    catch { exec nats kv info $bucket } err errOpts
    set err
} -result {nats: error: nats: bucket not found} -cleanup {
    # make sure it is removed
    execNatsCmd kv add $bucket
    execNatsCmd kv del $bucket -f
}

########### LIST ###########

test key_value_mgmt-list-1 "List buckets with no actual buckets" -body {
    $js kv_buckets
} -result ""

test key_value_mgmt-list-2 "List buckets" -setup {
    execNatsCmd kv add test1
    execNatsCmd kv add test2
} -body {
    $js kv_buckets 
} -result "test1 test2" -cleanup {
    execNatsCmd kv del test1 -f
    execNatsCmd kv del test2 -f
}

# CLEANUP

$js destroy
$conn destroy
stopNats NATS_JS

tcltest::cleanupTests