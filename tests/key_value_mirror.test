# Copyright (c) 2023 Petro Kazmirchuk https://github.com/Kazmirchuk
# Copyright (c) 2023 ANT Solutions https://antsolutions.eu/

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - Hub <-> Leaf connection across JS domains
# - Mirrored KV within one NATS
# - Mirrored KV between the hub and the leaf NATS

source test_utils.tcl
set hub_bucket MY_HUB_BUCKET
set mirror_bucket MY_MIRROR_BUCKET
set leaf_mirror_bucket MY_LEAF_MIRROR_BUCKET

startNats NATS_HUB -c ./conf/hub.conf
startNats NATS_LEAF -c ./conf/leaf.conf

# connect to the hub server and create a bucket
set conn_hub [nats::connection new "MyNatsToHub"]
$conn_hub configure -servers nats://localhost:4222 -user acc -password acc
$conn_hub connect
set js_hub [$conn_hub jet_stream]
set kv_hub [$js_hub create_kv_bucket $hub_bucket -history 64]

# connect to the leaf server
set conn_leaf [nats::connection new "MyNatsToLeaf"]
$conn_leaf configure -servers nats://localhost:4111 -user acc -password acc
$conn_leaf connect
set js_leaf [$conn_leaf jet_stream]

# connect to the leaf server but use the "hub" domain
set js_leaf_to_hub [$conn_leaf jet_stream -domain hub]

########### HUB <-> LEAF ###########
set kv_leaf_to_hub [$js_leaf_to_hub bind_kv_bucket $hub_bucket]

test key_value-leaf2hub-1 "Get values from the hub bucket using a leaf connection" -body {
    $kv_hub put key1 value1
    $kv_leaf_to_hub get key1
} -match glob -result [dict create bucket $hub_bucket key key1 value value1 revision 1 created * delta {} operation PUT]

test key_value-leaf2hub-2 "Put values to the hub bucket using a leaf connection" -body {
    $kv_leaf_to_hub put key1 value2
    $kv_hub get key1
} -match glob -result [dict create bucket $hub_bucket key key1 value value2 revision 2 created * delta {} operation PUT]

test key_value_leaf2hub-3 "Get history of the hub bucket using a leaf connection" -body {
    set entries [$kv_leaf_to_hub history key1]
    assert {[llength $entries] == 2} 1
    assert {[dict_in [dict create \
                      bucket $hub_bucket \
                      key key1 \
                      value value1 \
                      revision 1 \
                      operation PUT] [lindex $entries 0]]}
    assert {[dict_in [dict create \
                      bucket $hub_bucket \
                      key key1 \
                      value value2 \
                      revision 2 \
                      operation PUT] [lindex $entries 1]]}
}

test key_value_leaf2hub-4 "List hub buckets using a leaf connection" -body {
    $js_leaf_to_hub kv_buckets
} -result $hub_bucket

$kv_leaf_to_hub destroy
$js_hub empty_kv_bucket $hub_bucket

########### MIRROR IN THE SAME DOMAIN ###########

test key_value-mirror-same-domain-1 "Create a KV mirror in the same domain and get a value" -body {
    # note that we need to repeat -history 64 here - default history would be 1 irrespectively of the origin bucket
    set kv_mirror [$js_hub create_kv_bucket $mirror_bucket -mirror_name $hub_bucket -history 64]
    $kv_hub put key1 value3
    sleep 100 ;# allow NATS to propagate values
    $kv_mirror get key1
    # TODO check if bucket must be the original name or mirror name here:
} -match glob -result [dict create bucket $mirror_bucket key key1 value value3 revision * created * delta {} operation PUT]

test key_value-mirror-same-domain-2 "Put a value into the mirror and check the source KV" -body {
    $kv_mirror put key1 value4
    sleep 100
    $kv_hub get key1
} -match glob -result [dict create bucket $hub_bucket key key1 value value4 revision * created * delta {} operation PUT]

test key_value-mirror-same-domain-3 "Get history from the mirror" -body {
    set entries [$kv_mirror history key1]
    assert {[llength $entries] == 2} 1
    assert {[dict_in [dict create \
                      bucket $mirror_bucket \
                      key key1 \
                      value value3 \
                      operation PUT] [lindex $entries 0]]}
    assert {[dict_in [dict create \
                      bucket $mirror_bucket \
                      key key1 \
                      value value4 \
                      operation PUT] [lindex $entries 1]]}
}

$kv_mirror destroy
$js_hub empty_kv_bucket $hub_bucket

# ########### MIRROR FROM ANOTHER DOMAIN ###########

set kv_leaf [$js_leaf create_kv_bucket $leaf_mirror_bucket -mirror_name $hub_bucket -mirror_domain hub -history 64]
set rev [$kv_hub put key2 value1]
sleep 100

test key_value-mirror-different-domain-1 "Create a KV mirror in another domain and get a value" -body {
    $kv_leaf get key2
} -match glob -result [dict create bucket $leaf_mirror_bucket key key2 value value1 revision $rev created * delta {} operation PUT]

set rev [$kv_leaf put key2 value2]
test key_value-mirror-different-domain-2 "Put a value into the mirror and check the source KV in the 'hub' domain" -body {
    $kv_hub get key2
} -match glob -result [dict create bucket $hub_bucket key key2 value value2 revision $rev created * delta {} operation PUT]

test key_value-mirror-different-domain-3 "Get history from the mirror across domains" -body {
    set entries [$kv_leaf history >]
    assert {[llength $entries] == 2} 1
    assert {[dict_in [dict create \
                      bucket $leaf_mirror_bucket \
                      key key2 \
                      value value1 \
                      operation PUT] [lindex $entries 0]]}
    assert {[dict_in [dict create \
                      bucket $leaf_mirror_bucket \
                      key key2 \
                      value value2 \
                      operation PUT] [lindex $entries 1]]}
}

test key_value-mirror-different-domain-4 "Bucket status should provide info about the source bucket" -body {
    set status [$kv_leaf status]
    assert {[dict get $status mirror_name] eq $hub_bucket} 1
    assert {[dict get $status mirror_domain] eq "hub"} 1
} 

$kv_leaf destroy
$js_hub empty_kv_bucket $hub_bucket

$js_leaf_to_hub destroy
$js_leaf destroy
$conn_leaf destroy

$js_hub destroy
$conn_hub destroy

stopNats NATS_LEAF
stopNats NATS_HUB
cleanupTests
