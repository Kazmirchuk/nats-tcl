# Copyright (c) 2023 Petro Kazmirchuk https://github.com/Kazmirchuk
# Copyright (c) 2023 ANT Solutions https://antsolutions.eu/

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - get history
# - get all keys
# - watch one key
# - watch a wildcard key

source test_utils.tcl

set bucket MY_TEST_BUCKET
startNats NATS_JS --jetstream

set conn [nats::connection new "KV" -log_chan [tcltest::outputChannel]]
$conn configure -servers nats://localhost:4222
$conn connect
set js [$conn jet_stream]
set kv [$js create_kv_bucket $bucket -history 64]

test key_value_watchers-history-1 "Get history for an empty bucket" -body {
    $kv history >
} -result * -match glob -errorCode {NATS ErrKeyNotFound}

test key_value_watchers-keys-1 "Get keys for an empty bucket" -body {
    $kv keys
} -result * -match glob -errorCode {NATS ErrKeyNotFound}

test key_value_watchers-history-2 "Get history for a key" -setup {
    $kv put key1 value1_1
    $kv put key1 value1_2
    $kv delete key1
    $kv put key1 value1_3
} -body {
    set entries [$kv history key1]
    assert {[llength $entries] == 4} 1
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key key1 \
                      value value1_1 \
                      revision 1 \
                      operation PUT] [lindex $entries 0]]}
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key key1 \
                      value value1_2 \
                      revision 2 \
                      operation PUT] [lindex $entries 1]]}
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key key1 \
                      value {} \
                      revision 3 \
                      operation DEL] [lindex $entries 2]]}
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key key1 \
                      value value1_3 \
                      revision 4 \
                      operation PUT] [lindex $entries 3]]}
} -result ""

test key_value_watchers-history-3 "Get history for a key that doesn't exist" -body {
    $kv history key2
} -result * -match glob -errorCode {NATS ErrKeyNotFound}

test key_value_watchers-history-4 "Get history for a purged key" -setup {
    $kv purge key1
    $kv put key1 value1_4
} -body {
    set entries [$kv history key1]
    assert {[llength $entries] == 2} 1
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key key1 \
                      value {} \
                      revision 5 \
                      operation PURGE] [lindex $entries 0]]}
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key key1 \
                      value value1_4 \
                      revision 6 \
                      operation PUT] [lindex $entries 1]]}
} -result ""

test key_value_watchers-keys-2 "Get all keys" -setup {
    $kv delete key1
    $kv put key2 value2
    $kv put key3 value3
} -body {
    lsort [$kv keys]
} -result {key2 key3}

set watcherCallback [lambda {entry} {
    lappend ::allEntries $entry
}]

test key_value_watchers-watch-1 "Watch one key" -body {
    set watcher [$kv watch key2 -callback $watcherCallback]
    $kv put key2 value3
    $kv delete key2
    while {[llength $allEntries] < 4} {
        wait_for ::allEntries
    }
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key key2 \
                      value value2 \
                      operation PUT] [lindex $allEntries 0]]}
    assert {[lindex $allEntries 1] eq ""}
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key key2 \
                      value value3 \
                      operation PUT] [lindex $allEntries 2]]}
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key key2 \
                      value {} \
                      operation DEL] [lindex $allEntries 3]]}
} -result "" -cleanup {
    $watcher destroy
    set allEntries [list]
}

test key_value_watchers-watch-2 "Watch a wildcard" -body {
    set watcher [$kv watch keys.* -callback $watcherCallback -ignore_deletes true]
    $kv put keys.1 value1
    $kv delete keys.1
    $kv put keys.2 value2
    while {[llength $allEntries] < 3} {
        wait_for ::allEntries
    }
    assert {[lindex $allEntries 0] eq ""}
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key keys.1 \
                      value value1 \
                      operation PUT] [lindex $allEntries 1]]}
    assert {[dict_in [dict create \
                      bucket $bucket \
                      key keys.2 \
                      value value2 \
                      operation PUT] [lindex $allEntries 2]]}
} -result "" -cleanup {
    $watcher destroy
    set allEntries [list]
}

$kv destroy
$js delete_kv_bucket $bucket
$js destroy
$conn destroy
stopNats NATS_JS

tcltest::cleanupTests
return
