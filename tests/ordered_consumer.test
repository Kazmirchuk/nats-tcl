# Copyright (c) 2021-2025 Petro Kazmirchuk https://github.com/Kazmirchuk
# Copyright (c) 2021 ANT Solutions https://antsolutions.eu/

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

source test_utils.tcl

set stream_name MY_STREAM

startNats NATS --jetstream
set conn [nats::connection new JS]
$conn configure -servers nats://localhost:4222
$conn connect
set jet_stream [$conn jet_stream -timeout 1000]

$jet_stream add_stream $stream_name -subjects [list test.*]

proc consumerCallback {msg} {
    lappend ::gotMsgs $msg ;# no ACK needed when using Ordered Consumer
}

# catching specific messages in the socket using "intercept" is tedious
# instead we override message handling in nats::ordered_consumer
proc intercept_msg {obj} {
    oo::objdefine $obj {
        method OnMsg {subj msg reply} {
            # MsgFilter returns true if the message should be dropped
            if {![MsgFilter $msg]} {
                next $subj $msg $reply
            }
        }
    }
}
proc intercept_clear {obj} {
    oo::objdefine $obj {
        deletemethod OnMsg
    }
}

test ordered-1 "Ordered consumer - no such stream" -body {
    $jet_stream ordered_consumer BOGUS_STREAM -callback consumerCallback
} -result {stream not found} -errorCode {NATS ErrStreamNotFound}

test ordered-2 "Ordered consumer - nominal case" -body {
    set gotMsgs [list]
    # publish a few messages *before* creating the consumer
    foreach msg { 1 2 3 } {
        $jet_stream publish test.9 $msg -stream $stream_name
    }
    duration {
        set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -description "Ordered consumer" -filter_subject test.9]
        while {[llength $gotMsgs] < 3} {
            wait_for ::gotMsgs
        }
    } elapsed
    assert {$elapsed < 500}
    assert {[llength $gotMsgs] == 3} 1
    set myconfig [dict get [$cons info] config]
    set consumerConfig [dict get [$jet_stream consumer_info $stream_name [$cons name]] config]
    assert {[dict_in $myconfig $consumerConfig]}
    # publish a few messages *while* we have the consumer
    foreach msg { 4 5 6 } {
        $jet_stream publish test.9 $msg -stream $stream_name
    }
    duration {
        while {[llength $gotMsgs] < 6} {
            wait_for ::gotMsgs
        }
    } elapsed
    assert {$elapsed < 500}
    assert {[lastError $cons] eq ""} 1
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2 3 4 5 6} -cleanup {
    $cons destroy
}

test ordered-3 "Ordered consumer - reset - missing heartbeats" -body {
    proc MsgFilter {msg} {
        return [nats::msg idle_heartbeat $msg]  ;# drop all HB
    }
    set gotMsgs [list]
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.10 -idle_heartbeat 300]
    set consumerName [$cons name]
    foreach msg { 1 2 3 } {
        $jet_stream publish test.10 $msg -stream $stream_name
    }
    while {[llength $gotMsgs] < 3} {
        wait_for ::gotMsgs
    }
    intercept_msg $cons
    wait_for ${cons}::last_error 1200  ;# wait for at least hb interval * 3
    intercept_clear $cons
    assert {[lastError $cons] eq "ErrConsumerNotActive"} 1
    # reset in progress; meanwhile publish more messages
    foreach msg { 4 5 6 } {
        $jet_stream publish test.10 $msg -stream $stream_name
    }
    while {[llength $gotMsgs] < 6} {
        wait_for ::gotMsgs
    }
    assert {$consumerName ne [$cons name]} 1  ;# check that the push consumer was recreated
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2 3 4 5 6} -cleanup {
    rename MsgFilter ""
    $cons destroy
}

test ordered-4 "Ordered consumer - reset - sequence mismatch in HB" -body {
    proc MsgFilter {msg} {
        return [expr {[nats::msg data $msg] == 3}]  ;# drop the 3rd message
    }
    set gotMsgs [list]
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.11 -idle_heartbeat 500]
    set consumerName [$cons name]
    intercept_msg $cons
    foreach msg { 1 2 3 } {
        $jet_stream publish test.11 $msg -stream $stream_name
    }
    # the 1st HB triggers a reset
    wait_for ${cons}::last_error 800
    intercept_clear $cons
    assert {[lastError $cons] eq "ErrConsumerSequenceMismatch"} 1
    while {[llength $gotMsgs] < 3} {
        wait_for ::gotMsgs
    }
    assert {$consumerName ne [$cons name]} 1  ;# check that the push consumer was recreated
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2 3} -cleanup {
    rename MsgFilter ""
    $cons destroy
}

test ordered-5 "Ordered consumer - reset - sequence mismatch in a message" -body {
    proc MsgFilter {msg} {
        return [expr {[nats::msg data $msg] == 2}]  ;# drop the 2nd message
    }
    set gotMsgs [list]
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.12]
    set consumerName [$cons name]
    intercept_msg $cons
    foreach msg { 1 2 3 } {
        $jet_stream publish test.12 $msg -stream $stream_name
    }
    # the 3rd message triggers a reset
    wait_for ${cons}::last_error
    intercept_clear $cons
    assert {[lastError $cons] eq "ErrConsumerSequenceMismatch"} 1
    while {[llength $gotMsgs] < 3} {
        wait_for ::gotMsgs 1000
    }
    assert {$consumerName ne [$cons name]} 1  ;# check that the push consumer was recreated
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2 3} -cleanup {
    rename MsgFilter ""
    $cons destroy
}

test ordered-6 "Ordered consumer - reset - server restart" -body {
    $conn configure -reconnect_time_wait 500 ;# must be less than RetryInterval
    set gotMsgs [list]
    set allErrors [list]
    $jet_stream publish test.13 1 -stream $stream_name
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.13 -idle_heartbeat 300]
    trace add variable ${cons}::last_error write errorTrace
    set ${cons}::RetryInterval 1000 ;# default interval 10s is recommended for production, but it's too long for the test
    wait_for ::gotMsgs
    stopNats NATS
    # consumer resets but fails to create a new push consumer due to a timeout
    wait_for ::allErrors 2000
    startNats NATS --jetstream
    wait_for ${cons}::Name 2000 ;# wait until the consumer recreates the subscription
    assert {$allErrors eq {ErrConsumerNotActive ErrTimeout ErrConsumerNotActive}}
    $jet_stream publish test.13 2 -stream $stream_name
    wait_for ::gotMsgs 500
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 2} -cleanup {
    $cons destroy
}

test ordered-7 "Ordered consumer - quick reconnect" -body {
    set gotMsgs [list]
    set allErrors [list]
    $jet_stream publish test.14 1 -stream $stream_name
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.14]
    set consumerName [$cons name]
    set connNs [info object namespace $conn]
    trace add variable ${connNs}::last_error write errorTrace
    wait_for ::gotMsgs
    intercept $conn "" [dict create "PUB" "PUB-BOGUS"] ;# corrupt the next PUB
    $conn publish test.14 2
    wait_for ::allErrors 1000
    while {[$conn cget status] ne $nats::status_connected} {
        wait_for ${connNs}::status 2000
    }
    $jet_stream publish test.14 3 -stream $stream_name
    wait_for ::gotMsgs 500
    assert {$allErrors eq "ErrServer"} ;# unknown protocol operation
    assert {$consumerName eq [$cons name]}  ;# still the same push consumer in NATS
    assert {[set ${cons}::last_error] eq ""}
    lmap msg $gotMsgs {nats::msg data $msg}
} -result {1 3} -cleanup {
    $cons destroy
}

test ordered-8 "Ordered consumer - reset - stream deleted" -body {
    set gotMsgs [list]
    set allErrors [list]
    set cons [$jet_stream ordered_consumer $stream_name -callback consumerCallback -filter_subject test.14 -idle_heartbeat 500]
    trace add variable ${cons}::last_error write errorTrace
    $jet_stream delete_stream $stream_name
    while {[llength $allErrors] < 2} {
        wait_for ::allErrors 2000
    }
    assert {$allErrors eq {ErrConsumerNotActive ErrStreamNotFound}}
    $cons name
} -result ""

$conn destroy
stopNats NATS

cleanupTests
