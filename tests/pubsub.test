# Copyright (c) 2022-2023 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - publishing and subscription to messages with headers
# - treating a received message as a dict
# - the no-responders feature
# - old-style requests with -max_msgs option
# - coroutine-aware sync request
source test_utils.tcl

startNats NATS

set conn [nats::connection new "AdvancedPubSub" -log_chan [tcltest::outputChannel]]
#debugLogging $conn

$conn configure -servers nats://localhost:4222
$conn connect

test pubsub-1 "Publish and receive a message with a header" -body {
    set msg_received 0
    sniffer $conn {
        set sid [$conn subscribe nats_2.2 -callback subCallback -dictmsg true]
        set msg_out [nats::msg create "nats_2.2" -data "payload"]
        nats::header set msg_out hdr1 "val 1" hdr2 "val2"
        $conn publish_msg $msg_out
        wait_for ::inMsg
    } readData writtenData -all_lines 1
    
    assert {[nats::msg subject $inMsg] eq "nats_2.2"}
    assert {[nats::msg data $inMsg] eq "payload"}
    assert {[nats::msg reply $inMsg] eq ""}
    assert {[nats::header get $inMsg "hdr1"] eq "val 1"}
    assert {[nats::header get $inMsg "hdr2"] eq "val2"}

    # remove the first element in the list with SUB
    assert {[lrange $writtenData 1 end] eq [list {HPUB nats_2.2  37 44} NATS/1.0 {hdr1: val 1} {hdr2: val2} {} payload]} 1
    assert {$readData eq [list "HMSG nats_2.2 $sid 37 44" "NATS/1.0" "hdr1: val 1" "hdr2: val2" "" "payload"]}
} -cleanup {
    $conn unsubscribe $sid
}

test pubsub-2 "Send requests with headers" -setup {
    set resp [responder new -subject nats_2.2]
} -body {
    # test a sync request
    set msg_out [nats::msg create "nats_2.2" -data "0 msg with header"]
    nats::header set msg_out hdr1 "value 1"
    set response [$conn request_msg $msg_out -timeout 500 -dictmsg true]

    assert {[nats::msg data $response] eq "msg with header" } 1
    assert {[nats::header get $response "hdr1"] eq "value 1"} 1
    
    # test an async request
    nats::msg set msg_out -data "0 msg2 with header"
    
    $conn request_msg $msg_out -timeout 500 -dictmsg true -callback asyncReqCallback
    wait_for ::inMsg 1000
    assert {[nats::msg data $inMsg] eq "msg2 with header"} 1
    assert {[nats::header get $inMsg "hdr1"] eq "value 1"} 1
    
    # test a sync request, but get back a plain message with no header
    nats::msg set msg_out -data "0 msg3 with header"
    set response [$conn request_msg $msg_out -timeout 500 -dictmsg 0]
    assert { $response eq "msg3 with header" }
} -cleanup {
    $resp destroy
}

test pubsub-3 "Receive a message with a header from NATS CLI" -body {
    set msg_received 0
    $conn subscribe nats_cli -dictmsg true -callback [lambda {subject message replyTo} {
        assert {$subject eq "nats_cli"}
        assert {[nats::msg data $message] eq "payload"}
        assert {$replyTo eq ""}

        assert {[nats::header get $message "hdr1"] eq "val1"}
        # val2 and val3 can come in any order
        set hdr_values [nats::header values $message "hdr2"]
        assert {"val2" in $hdr_values}
        assert {"val3" in $hdr_values}
        set ::msg_received 1
    }]
    wait_flush $conn
    execNatsCmd pub -H hdr1:val1 -H hdr2:val2 -H hdr2:val3 nats_cli payload 2>@1
    wait_for ::msg_received 1000
    set msg_received
} -result 1

test pubsub-4 "Receive no-responders from a subscription" -body {
    set inbox [$conn inbox]
    $conn subscribe $inbox -callback subCallback -dictmsg true
    $conn publish "unknown_subject" "" -reply $inbox
    wait_for ::inMsg
    assert {[nats::msg no_responders $inMsg]} 1
}

test pubsub-5 "Receive no-responders from a sync request" -body {
    duration {
        catch {$conn request nats_2.2 "no response" -timeout 500} err errOpts
    } elapsed
    assert { $elapsed < 100 } ;# much lower than the timeout!
    assert {[dict get $errOpts -errorcode] eq {NATS ErrNoResponders}}
    assert {$err eq "No responders available for request" }
}

test pubsub-6 "Receive no-responders from an async request" -body {
    $conn request nats_2.2 "no response" -timeout 500 -dictmsg 1 -callback [lambda {timedOut msg} {
        assert {$timedOut}
        assert {[nats::msg no_responders $msg]} 1
        set ::inMsg 1
    }]
    duration {
        wait_for ::inMsg
    } elapsed
    assert { $elapsed < 100 }
}

test pubsub-7.1 "Old-style request - async - get all messages" -setup {
    for {set i 0} { $i < 3} { incr i } {
        responder new
    }
    set oldStyleCb [lambda {timedOut msg} {
        lappend ::gotMsgs [list $timedOut $msg]
    }]
    set gotMsgs [list]
} -body {
    $conn request service "0 I need help 7.1" -max_msgs 3 -callback $oldStyleCb
    while {[llength $gotMsgs] < 3} {
        wait_for ::gotMsgs
    }
    assert {[llength $gotMsgs] == 3} 1
    foreach i $gotMsgs {
        lassign $i timedOut msg
        assert {[nats::msg data $msg] eq "I need help 7.1"}
        assert {!$timedOut}
    }
    array size ${conn}::requests
} -result 0 -cleanup {
    set gotMsgs [list]
}

test pubsub-7.2 "Old-style request - async - not all messages" -body {
    # the callback will be invoked 3 times with a reply and the 4th time with timedOut=1
    $conn request service "0 I need help 7.2" -max_msgs 4 -timeout 500 -callback $oldStyleCb
    duration {
        while {[llength $gotMsgs] < 4} {
            wait_for ::gotMsgs 1000
        }
    } elapsed
    assert {[approx $elapsed 500]}
    assert {[llength $gotMsgs] == 4} 1
    for {set i 0} {$i < 3} {incr i} {
        lassign [lindex $gotMsgs $i] timedOut msg
        assert {[nats::msg data $msg] eq "I need help 7.2"}
        assert {!$timedOut}
    }
    lassign [lindex $gotMsgs 3] timedOut msg
    assert {$timedOut}
    array size ${conn}::requests
} -result 0

test pubsub-7.3 "Old-style request - async - timeout" -body {
    $conn request service "500 I need help 7.3" -max_msgs 3 -timeout 100 -callback asyncReqCallback
    duration {
        wait_for ::inMsg
    } elapsed
    assert {[approx $elapsed 100]}
    assert {$inMsg eq "timeout"}
    array size ${conn}::requests
} -result 0

test pubsub-7.4 "Old-style request - sync - get all messages" -body {    
    set responses [$conn request service "0 I need help 7.4" -max_msgs 3]
    assert {[llength $responses] == 3} 1
    foreach msg $responses {
        assert {[nats::msg data $msg] eq "I need help 7.4"}
    }
    array size ${conn}::requests
} -result 0

test pubsub-7.5 "Old-style request - sync - not all messages" -body {
    duration {
        set responses [$conn request service "0 I need help 7.5" -max_msgs 4 -timeout 1000]
    } elapsed
    assert {[approx $elapsed 1000]}
    assert {[llength $responses] == 3} 1
    foreach msg $responses {
        assert {[nats::msg data $msg] eq "I need help 7.5"}
    }
    array size ${conn}::requests
} -result 0

test pubsub-7.6 "Old-style request - sync - timeout" -body {
    duration {
        catch {$conn request service "500 I need help" -max_msgs 3 -timeout 100} err errOpts
    } elapsed
    assert {[dict get $errOpts -errorcode] eq {NATS ErrTimeout}}
    assert {$err eq "Request to service timed out"}
    assert {[approx $elapsed 100]}
    array size ${conn}::requests
} -result 0 -cleanup {
    stopAllResponders
    sleep 500
}

test pubsub-9 "Send 2 sync requests in coroutines" -setup {
    set resp [responder new]
} -body {
    # prove that vwait in "request" is coroutine-aware
    set results [list]
    proc coro_body {delay msg} {
        lappend ::results [$::conn request service "$delay $msg"] 
    }
    duration {
        coroutine coro1 coro_body 600 "msg1"
        coroutine coro2 coro_body 0 "msg2"
        while {[llength $results] != 2} {
            wait_for ::results 2000
        }
    } elapsed
    assert {[approx $elapsed 600 200]}
    # the second response will arrive sooner than the first. This would be impossible without coroutines
    set results
} -result "msg2 msg1" -cleanup {
    $resp destroy
}

$conn destroy
stopNats NATS
tcltest::cleanupTests
