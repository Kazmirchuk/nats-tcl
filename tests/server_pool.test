# Copyright (c) 2021-2023 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - parsing of server URLs
# - formatting of credentials for the CONNECT message
# - trying to connect when there are no NATS servers available
source test_utils.tcl

set conn [nats::connection new "ServerPool" -log_chan [tcltest::outputChannel]]
set connNs [info object namespace $conn]
$conn configure -randomize false

set sp [set ${connNs}::serverPool] ;# access to a private variable only for test purposes!

test server_pool-1 "Parse URL with hostname" -body {
    $sp parse nats-server1.com
} -result {scheme nats host nats-server1.com port 4222 discovered false reconnects 0 last_attempt 0}

test server_pool-2 "Parse URL with an auth_token" -body {
    $sp parse nats://some_token@nats-server2.com
} -result {scheme nats host nats-server2.com port 4222 discovered false reconnects 0 last_attempt 0 auth_token some_token}

test server_pool-3 "Parse URL with user/password" -body {
    $sp parse tls://user:pass@nats-server3.com
} -result {scheme tls host nats-server3.com port 4222 discovered false reconnects 0 last_attempt 0 user user password pass}

test server_pool-4 "Parse URL with a port number" -body {
    $sp parse tls://user:pass2@nats-server4.com:2020
} -result {scheme tls host nats-server4.com port 2020 discovered false reconnects 0 last_attempt 0 user user password pass2}

test server_pool-5.1 "Parse URL without a hostname" -body {
    $sp parse nats://:2020
} -result {Invalid URL nats://:2020} -errorCode {NATS ErrInvalidArg}

test server_pool-5.2 "Parse URL with invalid port number" -body {
    $sp parse nats://localhost:2a20
} -result {Invalid URL nats://localhost:2a20} -errorCode {NATS ErrInvalidArg}

test server_pool-6.1 "Configure multiple servers" -body {
    $conn configure -servers [list nats-server1.com nats://some_token@nats-server2.com tls://user:pass2@nats-server4.com:2020]
    llength [$sp all_servers]
} -result 3

test server_pool-6.2 "Trying to configure an invalid server does not clear the pool" -body {
    $conn configure -servers [list nats-server1.com nats://:2020]
} -result {Invalid URL nats://:2020} -errorCode {NATS ErrInvalidArg}
    
test server_pool-6.3 "The server pool is still the same" -body {
    llength [$sp all_servers]
} -result 3

test server_pool-7 "Add duplicate URL" -body {
    $sp add nats://nats-server1.com
    llength [$sp all_servers]
} -result 3

$conn configure -token dummy
# the last server in the list is considered current: tls://user:pass2@nats-server4.com:2020
test server_pool-8 "Format credentials from URL" -body {
    $sp format_credentials
} -result {user {"user"} pass {"pass2"}}

test server_pool-9 "Take auth token from config" -body {
    $conn configure -servers 127.0.0.1
    assert {[llength [$sp all_servers]] == 1}
    $sp format_credentials
} -result {auth_token {"dummy"}}

test server_pool-10 "User and password take precedence over auth_token" -body {
    $conn configure -user "def_user" -password "def_pass"
    $sp format_credentials
} -result {user {"def_user"} pass {"def_pass"}}

test server_pool-11 "Clear the pool" -body {
    $sp clear
    llength [$sp all_servers]
} -result 0

test server_pool-12 "Connection fails immediately with an empty pool" -body {
    duration {
        try {
            $conn connect
        } trap {NATS ErrNoServers} err {}
    } elapsed
    assert {$elapsed < 20}
    set err
} -result "Server pool is empty"

test server_pool-13.1 "Initial connection attempt goes through the server pool only once" -body {
    # remember that by default max_reconnect_attempts=60, but it matters only for reconnecting
    $conn configure -servers [list nats://localhost:4222 nats://localhost:4223]
    duration {
        try {
            $conn connect
        } trap {NATS ErrNoServers} err {}
    } elapsed
    # connect_timeout=2000 for 2 servers
    assert { $elapsed < 5000 }
    set err
} -result "No servers available for connection"

test server_pool-13.2 "DNS resolution failure" -body {
    $conn configure -servers nats://unknown-host.gg
    $conn connect
} -result {Failed to connect*} -match glob -errorCode {NATS ErrConnectionRefused}

test server_pool-14.1 "Reconnecting timings and counters" -body {
    startNats NATS
    $conn configure -servers [list nats://localhost:4222 nats://localhost:5222]
    $conn configure -connect_timeout 100 -reconnect_time_wait 2000
    trace add variable ${connNs}::last_error write errorTrace
    $conn connect
    stopNats NATS
    duration {
        test_utils::log::info "Waiting for the client to go into reconnecting"
        while {[$conn cget -status] ne $nats::status_reconnecting} {
            wait_for ${connNs}::status 5000
        }
        # 1. connect to NATS:5222 -> fail
        # 2. connect to NATS:4222 -> fail
        # 3. NATS:5222 has reconnects=1, so wait 2 - 0.1 = 1.9s
        after 1000 [list startNats NATS -p 5222]
        # 4. connect to NATS:5222 -> ok
        test_utils::log::info "Waiting for the client to restore connection"
        while {[$conn cget -status] ne $nats::status_connected} {
            wait_for ${connNs}::status 5000
        }
    } elapsed
    assert {[approx $elapsed 2100 200]}
    # on Windows I get ErrConnectionTimeout, and on Linux I get ErrConnectionRefused
    assert {$allErrors eq {ErrBrokenSocket ErrConnectionTimeout ErrConnectionTimeout} || $allErrors eq {ErrBrokenSocket ErrConnectionRefused ErrConnectionRefused}}
} -cleanup {
    trace remove variable ${connNs}::last_error write errorTrace
}

test server_pool-14.2 "Remove servers from the pool when they reach max_reconnect_attempts" -body {
    $conn configure -max_reconnect_attempts 2 -reconnect_time_wait 500
    stopNats NATS
    duration {
        # you should see "Removed N from the server pool" in the debug log...
        while {[$conn cget -status] ne $nats::status_closed} {
            wait_for ${connNs}::status 5000
        }
    } elapsed
    assert {[$conn all_servers] eq ""}
    assert {[approx $elapsed 700 150]}
} -cleanup {
    $conn disconnect
}

# cases 15.1 and 15.2 test for https://github.com/Kazmirchuk/nats-tcl/issues/28

startNats NATS
startNats NATS2 -p 5222
# reconnect_time_wait must be > 3*ping_interval
# default max_outstanding_pings=2
$conn configure -randomize false -ping_interval 500 -reconnect_time_wait 2000

test server_pool-15.1 "Check ErrStaleConnection combined with reconnect_time_wait" -body {
    $conn configure -servers [list nats://localhost:4222 nats://localhost:5222]
    $conn connect
    # pretend that we already waited for NATS2, so that the next attempt waits for reconnect_time_wait
    # 'connect' calls 'reset_counters', so we need to do this *after* 'connect'
    upvar #0 [info object namespace $sp]::Servers serverList
    set srv2 [lindex $serverList 0]
    assert {[dict get $srv2 port] == 5222}
    dict set srv2 last_attempt [clock milliseconds]
    lset serverList 0 $srv2

    intercept $conn [dict create "PONG\r\n" {}] "" ;# delete all PONGs sent by the server
    duration {
        wait_for ${connNs}::status 4000
    } elapsed
    assert {[lastError $conn] eq "ErrStaleConnection"}
    assert {[$conn cget -status] eq $nats::status_reconnecting} 1
    
    duration {
        while {[$conn cget -status] ne $nats::status_connected} {
            # the client waits for approx 2000-3*500 = 500ms
            wait_for ${connNs}::status 5000
        }
    } elapsed
    assert {[approx $elapsed 500 150]}
} -cleanup {
    $conn disconnect
}

test server_pool-15.2 "Check ErrBrokenSocket combined with reconnect_time_wait" -body {
    $conn configure -servers [list nats://localhost:4222 nats://localhost:5222] 
    $conn connect
    upvar #0 [info object namespace $sp]::Servers serverList
    set srv2 [lindex $serverList 0]
    assert {[dict get $srv2 port] == 5222}
    dict set srv2 last_attempt [clock milliseconds]
    lset serverList 0 $srv2

    stopNats NATS  ;# 500ms
    $conn publish foo bar

    duration {
        wait_for ${connNs}::status 4000
    } elapsed
    assert {[lastError $conn] eq "ErrBrokenSocket"}
    assert {[$conn cget -status] eq $nats::status_reconnecting} 1
    
    duration {
        while {[$conn cget -status] ne $nats::status_connected} {
            # the client waits for approx 2000-500 = 1500ms
            wait_for ${connNs}::status 5000
        }
    } elapsed
    assert {[approx $elapsed 1500 150]}
} -cleanup {
    $conn disconnect
}

stopNats NATS
stopNats NATS2

$conn destroy
cleanupTests
