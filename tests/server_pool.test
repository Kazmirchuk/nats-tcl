# Copyright (c) 2021 Petro Kazmirchuk https://github.com/Kazmirchuk

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.

# Test summary:
# - parsing of server URLs
# - formatting of credentials for the CONNECT message
# - trying to connect when there are no NATS servers available

set conn [nats::connection new]
$conn configure -randomize false

set sp [set ${conn}::serverPool] ;# access to a private variable only for test purposes!

test server_pool-1 "Parse URL with hostname" -body {
    $sp parse nats-server1.com
} -result {scheme nats host nats-server1.com port 4222 discovered false reconnects 0 last_attempt 0}

test server_pool-2 "Parse URL with an auth_token" -body {
    $sp parse nats://some_token@nats-server2.com
} -result {scheme nats host nats-server2.com port 4222 discovered false reconnects 0 last_attempt 0 auth_token some_token}

test server_pool-3 "Parse URL with user/password" -body {
    $sp parse tls://user:pass@nats-server3.com
} -result {scheme tls host nats-server3.com port 4222 discovered false reconnects 0 last_attempt 0 user user password pass}

test server_pool-4 "Parse URL with a port number" -body {
    $sp parse tls://user:pass2@nats-server4.com:2020
} -result {scheme tls host nats-server4.com port 2020 discovered false reconnects 0 last_attempt 0 user user password pass2}

test server_pool-5.1 "Parse URL without a hostname" -body {
    $sp parse nats://:2020
} -result {Invalid URL nats://:2020} -returnCodes error

test server_pool-5.2 "Parse URL with invalid port number" -body {
    $sp parse nats://localhost:2a20
} -result {Invalid URL nats://localhost:2a20} -returnCodes error

test server_pool-6.1 "Configure multiple servers" -body {
    $conn configure -servers [list nats-server1.com nats://some_token@nats-server2.com tls://user:pass2@nats-server4.com:2020]
    llength [$sp all_servers]
} -result 3

test server_pool-6.2 "Trying to configure an invalid server does not clear the pool" -body {
    catch {$conn configure -servers [list nats-server1.com nats://:2020]} err errOpts
    assert {[dict get $errOpts -errorcode] eq {NATS ErrInvalidArg}}
    llength [$sp all_servers]
} -result 3

test server_pool-7 "Add duplicate URL" -body {
    $sp add nats://nats-server1.com
    llength [$sp all_servers]
} -result 3

$conn configure -token dummy
# the last server in the list is considered current: tls://user:pass2@nats-server4.com:2020
test server_pool-8 "Format credentials from URL" -body {
    $sp format_credentials
} -result {user {"user"} pass {"pass2"}}

test server_pool-9 "Take auth token from config" -body {
    $conn configure -servers 127.0.0.1
    assert {[llength [$sp all_servers]] == 1}
    $sp format_credentials
} -result {auth_token {"dummy"}}

test server_pool-10 "User and password take precedence over auth_token" -body {
    $conn configure -user "def_user" -password "def_pass"
    $sp format_credentials
} -result {user {"def_user"} pass {"def_pass"}}

test server_pool-11 "Clear the pool" -body {
    $sp clear
    llength [$sp all_servers]
} -result 0

test server_pool-12 "Connection fails immediately with an empty pool" -body {
    duration {
        catch {$conn connect} err errOpts
    } elapsed
    assert {$elapsed < 20}
    assert {[dict get $errOpts -errorcode] eq {NATS ErrNoServers}}    
    set err
} -result "Server pool is empty"

test server_pool-13 "Initial connection attempt goes through the server pool only once" -body {
    # remember that by default max_reconnect_attempts=60, but it matters only for reconnecting
    $conn configure -servers [list nats://localhost:4222 nats://localhost:4223]
    duration {
        catch {$conn connect} err errOpts
    } elapsed
    # connect_timeout=2000 for 2 servers
    assert { $elapsed < 5000 }
    assert {[dict get $errOpts -errorcode] eq {NATS ErrNoServers}}    
    set err
} -result "No servers available for connection"

test server_pool-14.1 "Reconnecting timings and counters" -body {
    startNats NATS1
    $conn configure -servers [list nats://localhost:4222 nats://localhost:5222 nats://localhost:6222] -randomize false
    $conn configure -max_reconnect_attempts 1 -connect_timeout 500 -reconnect_time_wait 3000
    #debugLogging $conn
    
    set all_errors [list]
    set error_trace [lambda {var idx op } {
        upvar $var e
        if {$e ne ""} {
            lappend ::all_errors [lindex [dict get $e code] 1] ;# keep only the second part of the error code
        }
    }]    
    trace add variable ${conn}::last_error write $error_trace
    
    $conn connect
    stopNats NATS1 ;# the client goes into reconnecting
    duration {
        startNats NATS1
        [$conn logger]::info "Waiting for the client to go into reconnecting"
        while {[set ${conn}::status] != $nats::status_reconnecting} {
            wait_for ${conn}::status 5000
        }
        [$conn logger]::info "Waiting for the client to restore connection"
        while {[set ${conn}::status] != $nats::status_connected} {
            wait_for ${conn}::status 5000
        }
    } elapsed
    assert {[approx $elapsed 3000 1000]} ;# should be equal to reconnect_time_wait
    # on Windows I get ErrConnectionTimeout, and on Linux I get ErrConnectionRefused
    assert {$all_errors eq [list ErrBrokenSocket ErrConnectionTimeout ErrConnectionTimeout] || $all_errors eq [list ErrBrokenSocket ErrConnectionRefused ErrConnectionRefused] }
    foreach s [$conn all_servers] {
        if {[dict get $s port] == 4222} {
            assert {[dict get $s reconnects] == 0}
        } else {
            assert {[dict get $s reconnects] == 1}
        }
    }
} -cleanup {
    trace remove variable ${conn}::last_error write $error_trace
}

test server_pool-14.2 "Remove servers from the pool when they reach max_reconnect_attempts" -body {
    stopNats NATS1 ;# the client goes into reconnecting    
    startNats NATS1
    [$conn logger]::info "Waiting for the client to go into reconnecting"
    while {[set ${conn}::status] != $nats::status_reconnecting} {
        wait_for ${conn}::status 5000
    }
    [$conn logger]::info "Waiting for the client to restore connection"
    while {[set ${conn}::status] != $nats::status_connected} {
        wait_for ${conn}::status 5000
    }
    # you should see "Removed N from the server pool" in the log...
    assert {[llength [$conn all_servers]] == 1} 1
} -cleanup {
    $conn disconnect
    stopNats NATS1
}
    
$conn destroy
tcltest::cleanupTests
